// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perception/proto/ogm_config.proto

#include "perception/proto/ogm_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_perception_2fproto_2fogm_5fconfig_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_perception_2fproto_2fogm_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Lidar2DConfig;
}  // namespace protobuf_perception_2fproto_2fogm_5fconfig_2eproto
namespace perception {
class Lidar2DConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Lidar2DConfig>
      _instance;
} _Lidar2DConfig_default_instance_;
class OgmConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OgmConfig>
      _instance;
} _OgmConfig_default_instance_;
}  // namespace perception
namespace protobuf_perception_2fproto_2fogm_5fconfig_2eproto {
static void InitDefaultsLidar2DConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::_Lidar2DConfig_default_instance_;
    new (ptr) ::perception::Lidar2DConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::Lidar2DConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Lidar2DConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLidar2DConfig}, {}};

static void InitDefaultsOgmConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perception::_OgmConfig_default_instance_;
    new (ptr) ::perception::OgmConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perception::OgmConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_OgmConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsOgmConfig}, {
      &protobuf_perception_2fproto_2fogm_5fconfig_2eproto::scc_info_Lidar2DConfig.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Lidar2DConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OgmConfig.base);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::perception::Lidar2DConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::perception::Lidar2DConfig, scaningangle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::perception::Lidar2DConfig, maxdistance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::perception::Lidar2DConfig, linesnumber_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::perception::OgmConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::perception::OgmConfig, lidar2d_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::perception::OgmConfig, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::perception::OgmConfig, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::perception::OgmConfig, width_resolution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::perception::OgmConfig, length_resolution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::perception::OgmConfig, left_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::perception::OgmConfig, back_lenght_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::perception::OgmConfig, enable_ogm_fill_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::perception::OgmConfig, enable_ogm_expand_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::perception::Lidar2DConfig)},
  { 8, -1, sizeof(::perception::OgmConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::perception::_Lidar2DConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::perception::_OgmConfig_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "perception/proto/ogm_config.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n!perception/proto/ogm_config.proto\022\nper"
      "ception\"O\n\rLidar2DConfig\022\024\n\014scaningAngle"
      "\030\001 \001(\001\022\023\n\013maxDistance\030\002 \001(\001\022\023\n\013linesNumb"
      "er\030\003 \001(\005\"\357\001\n\tOgmConfig\0221\n\016lidar2d_config"
      "\030\001 \001(\0132\031.perception.Lidar2DConfig\022\r\n\005wid"
      "th\030\002 \001(\005\022\016\n\006length\030\003 \001(\005\022\030\n\020width_resolu"
      "tion\030\004 \001(\001\022\031\n\021length_resolution\030\005 \001(\001\022\022\n"
      "\nleft_width\030\006 \001(\001\022\023\n\013back_lenght\030\007 \001(\001\022\027"
      "\n\017enable_ogm_fill\030\010 \001(\010\022\031\n\021enable_ogm_ex"
      "pand\030\t \001(\010b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 378);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "perception/proto/ogm_config.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_perception_2fproto_2fogm_5fconfig_2eproto
namespace perception {

// ===================================================================

void Lidar2DConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Lidar2DConfig::kScaningAngleFieldNumber;
const int Lidar2DConfig::kMaxDistanceFieldNumber;
const int Lidar2DConfig::kLinesNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Lidar2DConfig::Lidar2DConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_perception_2fproto_2fogm_5fconfig_2eproto::scc_info_Lidar2DConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:perception.Lidar2DConfig)
}
Lidar2DConfig::Lidar2DConfig(const Lidar2DConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&scaningangle_, &from.scaningangle_,
    static_cast<size_t>(reinterpret_cast<char*>(&linesnumber_) -
    reinterpret_cast<char*>(&scaningangle_)) + sizeof(linesnumber_));
  // @@protoc_insertion_point(copy_constructor:perception.Lidar2DConfig)
}

void Lidar2DConfig::SharedCtor() {
  ::memset(&scaningangle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&linesnumber_) -
      reinterpret_cast<char*>(&scaningangle_)) + sizeof(linesnumber_));
}

Lidar2DConfig::~Lidar2DConfig() {
  // @@protoc_insertion_point(destructor:perception.Lidar2DConfig)
  SharedDtor();
}

void Lidar2DConfig::SharedDtor() {
}

void Lidar2DConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Lidar2DConfig::descriptor() {
  ::protobuf_perception_2fproto_2fogm_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_2fproto_2fogm_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Lidar2DConfig& Lidar2DConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_perception_2fproto_2fogm_5fconfig_2eproto::scc_info_Lidar2DConfig.base);
  return *internal_default_instance();
}


void Lidar2DConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.Lidar2DConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&scaningangle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&linesnumber_) -
      reinterpret_cast<char*>(&scaningangle_)) + sizeof(linesnumber_));
  _internal_metadata_.Clear();
}

bool Lidar2DConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:perception.Lidar2DConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double scaningAngle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &scaningangle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double maxDistance = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxdistance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 linesNumber = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &linesnumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perception.Lidar2DConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perception.Lidar2DConfig)
  return false;
#undef DO_
}

void Lidar2DConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perception.Lidar2DConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double scaningAngle = 1;
  if (this->scaningangle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->scaningangle(), output);
  }

  // double maxDistance = 2;
  if (this->maxdistance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->maxdistance(), output);
  }

  // int32 linesNumber = 3;
  if (this->linesnumber() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->linesnumber(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:perception.Lidar2DConfig)
}

::google::protobuf::uint8* Lidar2DConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:perception.Lidar2DConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double scaningAngle = 1;
  if (this->scaningangle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->scaningangle(), target);
  }

  // double maxDistance = 2;
  if (this->maxdistance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->maxdistance(), target);
  }

  // int32 linesNumber = 3;
  if (this->linesnumber() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->linesnumber(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.Lidar2DConfig)
  return target;
}

size_t Lidar2DConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.Lidar2DConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double scaningAngle = 1;
  if (this->scaningangle() != 0) {
    total_size += 1 + 8;
  }

  // double maxDistance = 2;
  if (this->maxdistance() != 0) {
    total_size += 1 + 8;
  }

  // int32 linesNumber = 3;
  if (this->linesnumber() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->linesnumber());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Lidar2DConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.Lidar2DConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const Lidar2DConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Lidar2DConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.Lidar2DConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.Lidar2DConfig)
    MergeFrom(*source);
  }
}

void Lidar2DConfig::MergeFrom(const Lidar2DConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.Lidar2DConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.scaningangle() != 0) {
    set_scaningangle(from.scaningangle());
  }
  if (from.maxdistance() != 0) {
    set_maxdistance(from.maxdistance());
  }
  if (from.linesnumber() != 0) {
    set_linesnumber(from.linesnumber());
  }
}

void Lidar2DConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.Lidar2DConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lidar2DConfig::CopyFrom(const Lidar2DConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.Lidar2DConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lidar2DConfig::IsInitialized() const {
  return true;
}

void Lidar2DConfig::Swap(Lidar2DConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Lidar2DConfig::InternalSwap(Lidar2DConfig* other) {
  using std::swap;
  swap(scaningangle_, other->scaningangle_);
  swap(maxdistance_, other->maxdistance_);
  swap(linesnumber_, other->linesnumber_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Lidar2DConfig::GetMetadata() const {
  protobuf_perception_2fproto_2fogm_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_2fproto_2fogm_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OgmConfig::InitAsDefaultInstance() {
  ::perception::_OgmConfig_default_instance_._instance.get_mutable()->lidar2d_config_ = const_cast< ::perception::Lidar2DConfig*>(
      ::perception::Lidar2DConfig::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OgmConfig::kLidar2DConfigFieldNumber;
const int OgmConfig::kWidthFieldNumber;
const int OgmConfig::kLengthFieldNumber;
const int OgmConfig::kWidthResolutionFieldNumber;
const int OgmConfig::kLengthResolutionFieldNumber;
const int OgmConfig::kLeftWidthFieldNumber;
const int OgmConfig::kBackLenghtFieldNumber;
const int OgmConfig::kEnableOgmFillFieldNumber;
const int OgmConfig::kEnableOgmExpandFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OgmConfig::OgmConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_perception_2fproto_2fogm_5fconfig_2eproto::scc_info_OgmConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:perception.OgmConfig)
}
OgmConfig::OgmConfig(const OgmConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_lidar2d_config()) {
    lidar2d_config_ = new ::perception::Lidar2DConfig(*from.lidar2d_config_);
  } else {
    lidar2d_config_ = NULL;
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_ogm_expand_) -
    reinterpret_cast<char*>(&width_)) + sizeof(enable_ogm_expand_));
  // @@protoc_insertion_point(copy_constructor:perception.OgmConfig)
}

void OgmConfig::SharedCtor() {
  ::memset(&lidar2d_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_ogm_expand_) -
      reinterpret_cast<char*>(&lidar2d_config_)) + sizeof(enable_ogm_expand_));
}

OgmConfig::~OgmConfig() {
  // @@protoc_insertion_point(destructor:perception.OgmConfig)
  SharedDtor();
}

void OgmConfig::SharedDtor() {
  if (this != internal_default_instance()) delete lidar2d_config_;
}

void OgmConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OgmConfig::descriptor() {
  ::protobuf_perception_2fproto_2fogm_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_2fproto_2fogm_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OgmConfig& OgmConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_perception_2fproto_2fogm_5fconfig_2eproto::scc_info_OgmConfig.base);
  return *internal_default_instance();
}


void OgmConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.OgmConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && lidar2d_config_ != NULL) {
    delete lidar2d_config_;
  }
  lidar2d_config_ = NULL;
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_ogm_expand_) -
      reinterpret_cast<char*>(&width_)) + sizeof(enable_ogm_expand_));
  _internal_metadata_.Clear();
}

bool OgmConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:perception.OgmConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .perception.Lidar2DConfig lidar2d_config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lidar2d_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 width = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 length = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double width_resolution = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_resolution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double length_resolution = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_resolution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double left_width = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &left_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double back_lenght = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &back_lenght_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable_ogm_fill = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_ogm_fill_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable_ogm_expand = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_ogm_expand_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perception.OgmConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perception.OgmConfig)
  return false;
#undef DO_
}

void OgmConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perception.OgmConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .perception.Lidar2DConfig lidar2d_config = 1;
  if (this->has_lidar2d_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_lidar2d_config(), output);
  }

  // int32 width = 2;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->width(), output);
  }

  // int32 length = 3;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->length(), output);
  }

  // double width_resolution = 4;
  if (this->width_resolution() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->width_resolution(), output);
  }

  // double length_resolution = 5;
  if (this->length_resolution() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->length_resolution(), output);
  }

  // double left_width = 6;
  if (this->left_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->left_width(), output);
  }

  // double back_lenght = 7;
  if (this->back_lenght() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->back_lenght(), output);
  }

  // bool enable_ogm_fill = 8;
  if (this->enable_ogm_fill() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->enable_ogm_fill(), output);
  }

  // bool enable_ogm_expand = 9;
  if (this->enable_ogm_expand() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->enable_ogm_expand(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:perception.OgmConfig)
}

::google::protobuf::uint8* OgmConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:perception.OgmConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .perception.Lidar2DConfig lidar2d_config = 1;
  if (this->has_lidar2d_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_lidar2d_config(), deterministic, target);
  }

  // int32 width = 2;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->width(), target);
  }

  // int32 length = 3;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->length(), target);
  }

  // double width_resolution = 4;
  if (this->width_resolution() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->width_resolution(), target);
  }

  // double length_resolution = 5;
  if (this->length_resolution() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->length_resolution(), target);
  }

  // double left_width = 6;
  if (this->left_width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->left_width(), target);
  }

  // double back_lenght = 7;
  if (this->back_lenght() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->back_lenght(), target);
  }

  // bool enable_ogm_fill = 8;
  if (this->enable_ogm_fill() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->enable_ogm_fill(), target);
  }

  // bool enable_ogm_expand = 9;
  if (this->enable_ogm_expand() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->enable_ogm_expand(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.OgmConfig)
  return target;
}

size_t OgmConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perception.OgmConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .perception.Lidar2DConfig lidar2d_config = 1;
  if (this->has_lidar2d_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *lidar2d_config_);
  }

  // int32 width = 2;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // int32 length = 3;
  if (this->length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->length());
  }

  // double width_resolution = 4;
  if (this->width_resolution() != 0) {
    total_size += 1 + 8;
  }

  // double length_resolution = 5;
  if (this->length_resolution() != 0) {
    total_size += 1 + 8;
  }

  // double left_width = 6;
  if (this->left_width() != 0) {
    total_size += 1 + 8;
  }

  // double back_lenght = 7;
  if (this->back_lenght() != 0) {
    total_size += 1 + 8;
  }

  // bool enable_ogm_fill = 8;
  if (this->enable_ogm_fill() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_ogm_expand = 9;
  if (this->enable_ogm_expand() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OgmConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.OgmConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const OgmConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OgmConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.OgmConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.OgmConfig)
    MergeFrom(*source);
  }
}

void OgmConfig::MergeFrom(const OgmConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.OgmConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_lidar2d_config()) {
    mutable_lidar2d_config()->::perception::Lidar2DConfig::MergeFrom(from.lidar2d_config());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
  if (from.width_resolution() != 0) {
    set_width_resolution(from.width_resolution());
  }
  if (from.length_resolution() != 0) {
    set_length_resolution(from.length_resolution());
  }
  if (from.left_width() != 0) {
    set_left_width(from.left_width());
  }
  if (from.back_lenght() != 0) {
    set_back_lenght(from.back_lenght());
  }
  if (from.enable_ogm_fill() != 0) {
    set_enable_ogm_fill(from.enable_ogm_fill());
  }
  if (from.enable_ogm_expand() != 0) {
    set_enable_ogm_expand(from.enable_ogm_expand());
  }
}

void OgmConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.OgmConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OgmConfig::CopyFrom(const OgmConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.OgmConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OgmConfig::IsInitialized() const {
  return true;
}

void OgmConfig::Swap(OgmConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OgmConfig::InternalSwap(OgmConfig* other) {
  using std::swap;
  swap(lidar2d_config_, other->lidar2d_config_);
  swap(width_, other->width_);
  swap(length_, other->length_);
  swap(width_resolution_, other->width_resolution_);
  swap(length_resolution_, other->length_resolution_);
  swap(left_width_, other->left_width_);
  swap(back_lenght_, other->back_lenght_);
  swap(enable_ogm_fill_, other->enable_ogm_fill_);
  swap(enable_ogm_expand_, other->enable_ogm_expand_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OgmConfig::GetMetadata() const {
  protobuf_perception_2fproto_2fogm_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_2fproto_2fogm_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace perception
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::perception::Lidar2DConfig* Arena::CreateMaybeMessage< ::perception::Lidar2DConfig >(Arena* arena) {
  return Arena::CreateInternal< ::perception::Lidar2DConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::perception::OgmConfig* Arena::CreateMaybeMessage< ::perception::OgmConfig >(Arena* arena) {
  return Arena::CreateInternal< ::perception::OgmConfig >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
