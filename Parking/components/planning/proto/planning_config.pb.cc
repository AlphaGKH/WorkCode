// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planning/proto/planning_config.proto

#include "planning/proto/planning_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_perception_2fproto_2fogm_5fconfig_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_perception_2fproto_2fogm_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_OgmConfig;
}  // namespace protobuf_perception_2fproto_2fogm_5fconfig_2eproto
namespace protobuf_planning_2fproto_2ffp_5fpath_5fplan_5fconfig_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_planning_2fproto_2ffp_5fpath_5fplan_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_FpPathPlanConfig;
}  // namespace protobuf_planning_2fproto_2ffp_5fpath_5fplan_5fconfig_2eproto
namespace protobuf_planning_2fproto_2fplanning_5fconfig_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_planning_2fproto_2fplanning_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TrajectoryStitchingConfig;
}  // namespace protobuf_planning_2fproto_2fplanning_5fconfig_2eproto
namespace protobuf_planning_2fproto_2fpoly_5fspeed_5fplan_5fconfig_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_planning_2fproto_2fpoly_5fspeed_5fplan_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_PolySpeedPlanConfig;
}  // namespace protobuf_planning_2fproto_2fpoly_5fspeed_5fplan_5fconfig_2eproto
namespace protobuf_planning_2fproto_2freference_5fline_5fprovider_5fconfig_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_planning_2fproto_2freference_5fline_5fprovider_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ReferenceLineProviderConfig;
}  // namespace protobuf_planning_2fproto_2freference_5fline_5fprovider_5fconfig_2eproto
namespace planning {
class TrajectoryStitchingConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrajectoryStitchingConfig>
      _instance;
} _TrajectoryStitchingConfig_default_instance_;
class PlanningConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlanningConfig>
      _instance;
} _PlanningConfig_default_instance_;
}  // namespace planning
namespace protobuf_planning_2fproto_2fplanning_5fconfig_2eproto {
static void InitDefaultsTrajectoryStitchingConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::planning::_TrajectoryStitchingConfig_default_instance_;
    new (ptr) ::planning::TrajectoryStitchingConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planning::TrajectoryStitchingConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TrajectoryStitchingConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTrajectoryStitchingConfig}, {}};

static void InitDefaultsPlanningConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::planning::_PlanningConfig_default_instance_;
    new (ptr) ::planning::PlanningConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planning::PlanningConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_PlanningConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsPlanningConfig}, {
      &protobuf_planning_2fproto_2freference_5fline_5fprovider_5fconfig_2eproto::scc_info_ReferenceLineProviderConfig.base,
      &protobuf_planning_2fproto_2ffp_5fpath_5fplan_5fconfig_2eproto::scc_info_FpPathPlanConfig.base,
      &protobuf_perception_2fproto_2fogm_5fconfig_2eproto::scc_info_OgmConfig.base,
      &protobuf_planning_2fproto_2fpoly_5fspeed_5fplan_5fconfig_2eproto::scc_info_PolySpeedPlanConfig.base,
      &protobuf_planning_2fproto_2fplanning_5fconfig_2eproto::scc_info_TrajectoryStitchingConfig.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_TrajectoryStitchingConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlanningConfig.base);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::TrajectoryStitchingConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::TrajectoryStitchingConfig, enable_trajectory_stitcher_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::TrajectoryStitchingConfig, replan_lateral_distance_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::TrajectoryStitchingConfig, replan_longitudinal_distance_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::TrajectoryStitchingConfig, trajectory_stitching_preserved_length_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::PlanningConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::PlanningConfig, refline_provider_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::PlanningConfig, fp_path_plan_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::PlanningConfig, ogm_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::PlanningConfig, poly_speed_plan_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::PlanningConfig, traj_stitching_config_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::planning::TrajectoryStitchingConfig)},
  { 9, -1, sizeof(::planning::PlanningConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::planning::_TrajectoryStitchingConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::planning::_PlanningConfig_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "planning/proto/planning_config.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n$planning/proto/planning_config.proto\022\010"
      "planning\0323planning/proto/reference_line_"
      "provider_config.proto\032(planning/proto/fp"
      "_path_plan_config.proto\032+planning/proto/"
      "poly_speed_plan_config.proto\032!perception"
      "/proto/ogm_config.proto\"\311\001\n\031TrajectorySt"
      "itchingConfig\022\"\n\032enable_trajectory_stitc"
      "her\030\001 \001(\010\022)\n!replan_lateral_distance_thr"
      "eshold\030\002 \001(\001\022.\n&replan_longitudinal_dist"
      "ance_threshold\030\003 \001(\001\022-\n%trajectory_stitc"
      "hing_preserved_length\030\004 \001(\001\"\277\002\n\016Planning"
      "Config\022F\n\027refline_provider_config\030\001 \001(\0132"
      "%.planning.ReferenceLineProviderConfig\0227"
      "\n\023fp_path_plan_config\030\002 \001(\0132\032.planning.F"
      "pPathPlanConfig\022)\n\nogm_config\030\003 \001(\0132\025.pe"
      "rception.OgmConfig\022=\n\026poly_speed_plan_co"
      "nfig\030\004 \001(\0132\035.planning.PolySpeedPlanConfi"
      "g\022B\n\025traj_stitching_config\030\005 \001(\0132#.plann"
      "ing.TrajectoryStitchingConfigb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 757);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "planning/proto/planning_config.proto", &protobuf_RegisterTypes);
  ::protobuf_planning_2fproto_2freference_5fline_5fprovider_5fconfig_2eproto::AddDescriptors();
  ::protobuf_planning_2fproto_2ffp_5fpath_5fplan_5fconfig_2eproto::AddDescriptors();
  ::protobuf_planning_2fproto_2fpoly_5fspeed_5fplan_5fconfig_2eproto::AddDescriptors();
  ::protobuf_perception_2fproto_2fogm_5fconfig_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_planning_2fproto_2fplanning_5fconfig_2eproto
namespace planning {

// ===================================================================

void TrajectoryStitchingConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrajectoryStitchingConfig::kEnableTrajectoryStitcherFieldNumber;
const int TrajectoryStitchingConfig::kReplanLateralDistanceThresholdFieldNumber;
const int TrajectoryStitchingConfig::kReplanLongitudinalDistanceThresholdFieldNumber;
const int TrajectoryStitchingConfig::kTrajectoryStitchingPreservedLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrajectoryStitchingConfig::TrajectoryStitchingConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_planning_2fproto_2fplanning_5fconfig_2eproto::scc_info_TrajectoryStitchingConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning.TrajectoryStitchingConfig)
}
TrajectoryStitchingConfig::TrajectoryStitchingConfig(const TrajectoryStitchingConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&replan_lateral_distance_threshold_, &from.replan_lateral_distance_threshold_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_trajectory_stitcher_) -
    reinterpret_cast<char*>(&replan_lateral_distance_threshold_)) + sizeof(enable_trajectory_stitcher_));
  // @@protoc_insertion_point(copy_constructor:planning.TrajectoryStitchingConfig)
}

void TrajectoryStitchingConfig::SharedCtor() {
  ::memset(&replan_lateral_distance_threshold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_trajectory_stitcher_) -
      reinterpret_cast<char*>(&replan_lateral_distance_threshold_)) + sizeof(enable_trajectory_stitcher_));
}

TrajectoryStitchingConfig::~TrajectoryStitchingConfig() {
  // @@protoc_insertion_point(destructor:planning.TrajectoryStitchingConfig)
  SharedDtor();
}

void TrajectoryStitchingConfig::SharedDtor() {
}

void TrajectoryStitchingConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrajectoryStitchingConfig::descriptor() {
  ::protobuf_planning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_2fproto_2fplanning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrajectoryStitchingConfig& TrajectoryStitchingConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_planning_2fproto_2fplanning_5fconfig_2eproto::scc_info_TrajectoryStitchingConfig.base);
  return *internal_default_instance();
}


void TrajectoryStitchingConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:planning.TrajectoryStitchingConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&replan_lateral_distance_threshold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_trajectory_stitcher_) -
      reinterpret_cast<char*>(&replan_lateral_distance_threshold_)) + sizeof(enable_trajectory_stitcher_));
  _internal_metadata_.Clear();
}

bool TrajectoryStitchingConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planning.TrajectoryStitchingConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool enable_trajectory_stitcher = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_trajectory_stitcher_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double replan_lateral_distance_threshold = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &replan_lateral_distance_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double replan_longitudinal_distance_threshold = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &replan_longitudinal_distance_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double trajectory_stitching_preserved_length = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &trajectory_stitching_preserved_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planning.TrajectoryStitchingConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planning.TrajectoryStitchingConfig)
  return false;
#undef DO_
}

void TrajectoryStitchingConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planning.TrajectoryStitchingConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable_trajectory_stitcher = 1;
  if (this->enable_trajectory_stitcher() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enable_trajectory_stitcher(), output);
  }

  // double replan_lateral_distance_threshold = 2;
  if (this->replan_lateral_distance_threshold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->replan_lateral_distance_threshold(), output);
  }

  // double replan_longitudinal_distance_threshold = 3;
  if (this->replan_longitudinal_distance_threshold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->replan_longitudinal_distance_threshold(), output);
  }

  // double trajectory_stitching_preserved_length = 4;
  if (this->trajectory_stitching_preserved_length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->trajectory_stitching_preserved_length(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:planning.TrajectoryStitchingConfig)
}

::google::protobuf::uint8* TrajectoryStitchingConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:planning.TrajectoryStitchingConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable_trajectory_stitcher = 1;
  if (this->enable_trajectory_stitcher() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enable_trajectory_stitcher(), target);
  }

  // double replan_lateral_distance_threshold = 2;
  if (this->replan_lateral_distance_threshold() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->replan_lateral_distance_threshold(), target);
  }

  // double replan_longitudinal_distance_threshold = 3;
  if (this->replan_longitudinal_distance_threshold() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->replan_longitudinal_distance_threshold(), target);
  }

  // double trajectory_stitching_preserved_length = 4;
  if (this->trajectory_stitching_preserved_length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->trajectory_stitching_preserved_length(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning.TrajectoryStitchingConfig)
  return target;
}

size_t TrajectoryStitchingConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning.TrajectoryStitchingConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double replan_lateral_distance_threshold = 2;
  if (this->replan_lateral_distance_threshold() != 0) {
    total_size += 1 + 8;
  }

  // double replan_longitudinal_distance_threshold = 3;
  if (this->replan_longitudinal_distance_threshold() != 0) {
    total_size += 1 + 8;
  }

  // double trajectory_stitching_preserved_length = 4;
  if (this->trajectory_stitching_preserved_length() != 0) {
    total_size += 1 + 8;
  }

  // bool enable_trajectory_stitcher = 1;
  if (this->enable_trajectory_stitcher() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrajectoryStitchingConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning.TrajectoryStitchingConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajectoryStitchingConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrajectoryStitchingConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning.TrajectoryStitchingConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning.TrajectoryStitchingConfig)
    MergeFrom(*source);
  }
}

void TrajectoryStitchingConfig::MergeFrom(const TrajectoryStitchingConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning.TrajectoryStitchingConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.replan_lateral_distance_threshold() != 0) {
    set_replan_lateral_distance_threshold(from.replan_lateral_distance_threshold());
  }
  if (from.replan_longitudinal_distance_threshold() != 0) {
    set_replan_longitudinal_distance_threshold(from.replan_longitudinal_distance_threshold());
  }
  if (from.trajectory_stitching_preserved_length() != 0) {
    set_trajectory_stitching_preserved_length(from.trajectory_stitching_preserved_length());
  }
  if (from.enable_trajectory_stitcher() != 0) {
    set_enable_trajectory_stitcher(from.enable_trajectory_stitcher());
  }
}

void TrajectoryStitchingConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning.TrajectoryStitchingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryStitchingConfig::CopyFrom(const TrajectoryStitchingConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning.TrajectoryStitchingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryStitchingConfig::IsInitialized() const {
  return true;
}

void TrajectoryStitchingConfig::Swap(TrajectoryStitchingConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrajectoryStitchingConfig::InternalSwap(TrajectoryStitchingConfig* other) {
  using std::swap;
  swap(replan_lateral_distance_threshold_, other->replan_lateral_distance_threshold_);
  swap(replan_longitudinal_distance_threshold_, other->replan_longitudinal_distance_threshold_);
  swap(trajectory_stitching_preserved_length_, other->trajectory_stitching_preserved_length_);
  swap(enable_trajectory_stitcher_, other->enable_trajectory_stitcher_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrajectoryStitchingConfig::GetMetadata() const {
  protobuf_planning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_2fproto_2fplanning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlanningConfig::InitAsDefaultInstance() {
  ::planning::_PlanningConfig_default_instance_._instance.get_mutable()->refline_provider_config_ = const_cast< ::planning::ReferenceLineProviderConfig*>(
      ::planning::ReferenceLineProviderConfig::internal_default_instance());
  ::planning::_PlanningConfig_default_instance_._instance.get_mutable()->fp_path_plan_config_ = const_cast< ::planning::FpPathPlanConfig*>(
      ::planning::FpPathPlanConfig::internal_default_instance());
  ::planning::_PlanningConfig_default_instance_._instance.get_mutable()->ogm_config_ = const_cast< ::perception::OgmConfig*>(
      ::perception::OgmConfig::internal_default_instance());
  ::planning::_PlanningConfig_default_instance_._instance.get_mutable()->poly_speed_plan_config_ = const_cast< ::planning::PolySpeedPlanConfig*>(
      ::planning::PolySpeedPlanConfig::internal_default_instance());
  ::planning::_PlanningConfig_default_instance_._instance.get_mutable()->traj_stitching_config_ = const_cast< ::planning::TrajectoryStitchingConfig*>(
      ::planning::TrajectoryStitchingConfig::internal_default_instance());
}
void PlanningConfig::clear_refline_provider_config() {
  if (GetArenaNoVirtual() == NULL && refline_provider_config_ != NULL) {
    delete refline_provider_config_;
  }
  refline_provider_config_ = NULL;
}
void PlanningConfig::clear_fp_path_plan_config() {
  if (GetArenaNoVirtual() == NULL && fp_path_plan_config_ != NULL) {
    delete fp_path_plan_config_;
  }
  fp_path_plan_config_ = NULL;
}
void PlanningConfig::clear_ogm_config() {
  if (GetArenaNoVirtual() == NULL && ogm_config_ != NULL) {
    delete ogm_config_;
  }
  ogm_config_ = NULL;
}
void PlanningConfig::clear_poly_speed_plan_config() {
  if (GetArenaNoVirtual() == NULL && poly_speed_plan_config_ != NULL) {
    delete poly_speed_plan_config_;
  }
  poly_speed_plan_config_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlanningConfig::kReflineProviderConfigFieldNumber;
const int PlanningConfig::kFpPathPlanConfigFieldNumber;
const int PlanningConfig::kOgmConfigFieldNumber;
const int PlanningConfig::kPolySpeedPlanConfigFieldNumber;
const int PlanningConfig::kTrajStitchingConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlanningConfig::PlanningConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_planning_2fproto_2fplanning_5fconfig_2eproto::scc_info_PlanningConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning.PlanningConfig)
}
PlanningConfig::PlanningConfig(const PlanningConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_refline_provider_config()) {
    refline_provider_config_ = new ::planning::ReferenceLineProviderConfig(*from.refline_provider_config_);
  } else {
    refline_provider_config_ = NULL;
  }
  if (from.has_fp_path_plan_config()) {
    fp_path_plan_config_ = new ::planning::FpPathPlanConfig(*from.fp_path_plan_config_);
  } else {
    fp_path_plan_config_ = NULL;
  }
  if (from.has_ogm_config()) {
    ogm_config_ = new ::perception::OgmConfig(*from.ogm_config_);
  } else {
    ogm_config_ = NULL;
  }
  if (from.has_poly_speed_plan_config()) {
    poly_speed_plan_config_ = new ::planning::PolySpeedPlanConfig(*from.poly_speed_plan_config_);
  } else {
    poly_speed_plan_config_ = NULL;
  }
  if (from.has_traj_stitching_config()) {
    traj_stitching_config_ = new ::planning::TrajectoryStitchingConfig(*from.traj_stitching_config_);
  } else {
    traj_stitching_config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:planning.PlanningConfig)
}

void PlanningConfig::SharedCtor() {
  ::memset(&refline_provider_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&traj_stitching_config_) -
      reinterpret_cast<char*>(&refline_provider_config_)) + sizeof(traj_stitching_config_));
}

PlanningConfig::~PlanningConfig() {
  // @@protoc_insertion_point(destructor:planning.PlanningConfig)
  SharedDtor();
}

void PlanningConfig::SharedDtor() {
  if (this != internal_default_instance()) delete refline_provider_config_;
  if (this != internal_default_instance()) delete fp_path_plan_config_;
  if (this != internal_default_instance()) delete ogm_config_;
  if (this != internal_default_instance()) delete poly_speed_plan_config_;
  if (this != internal_default_instance()) delete traj_stitching_config_;
}

void PlanningConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PlanningConfig::descriptor() {
  ::protobuf_planning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_2fproto_2fplanning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlanningConfig& PlanningConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_planning_2fproto_2fplanning_5fconfig_2eproto::scc_info_PlanningConfig.base);
  return *internal_default_instance();
}


void PlanningConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:planning.PlanningConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && refline_provider_config_ != NULL) {
    delete refline_provider_config_;
  }
  refline_provider_config_ = NULL;
  if (GetArenaNoVirtual() == NULL && fp_path_plan_config_ != NULL) {
    delete fp_path_plan_config_;
  }
  fp_path_plan_config_ = NULL;
  if (GetArenaNoVirtual() == NULL && ogm_config_ != NULL) {
    delete ogm_config_;
  }
  ogm_config_ = NULL;
  if (GetArenaNoVirtual() == NULL && poly_speed_plan_config_ != NULL) {
    delete poly_speed_plan_config_;
  }
  poly_speed_plan_config_ = NULL;
  if (GetArenaNoVirtual() == NULL && traj_stitching_config_ != NULL) {
    delete traj_stitching_config_;
  }
  traj_stitching_config_ = NULL;
  _internal_metadata_.Clear();
}

bool PlanningConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planning.PlanningConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .planning.ReferenceLineProviderConfig refline_provider_config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_refline_provider_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .planning.FpPathPlanConfig fp_path_plan_config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fp_path_plan_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .perception.OgmConfig ogm_config = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ogm_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .planning.PolySpeedPlanConfig poly_speed_plan_config = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_poly_speed_plan_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .planning.TrajectoryStitchingConfig traj_stitching_config = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_traj_stitching_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planning.PlanningConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planning.PlanningConfig)
  return false;
#undef DO_
}

void PlanningConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planning.PlanningConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .planning.ReferenceLineProviderConfig refline_provider_config = 1;
  if (this->has_refline_provider_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_refline_provider_config(), output);
  }

  // .planning.FpPathPlanConfig fp_path_plan_config = 2;
  if (this->has_fp_path_plan_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_fp_path_plan_config(), output);
  }

  // .perception.OgmConfig ogm_config = 3;
  if (this->has_ogm_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_ogm_config(), output);
  }

  // .planning.PolySpeedPlanConfig poly_speed_plan_config = 4;
  if (this->has_poly_speed_plan_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_poly_speed_plan_config(), output);
  }

  // .planning.TrajectoryStitchingConfig traj_stitching_config = 5;
  if (this->has_traj_stitching_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_traj_stitching_config(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:planning.PlanningConfig)
}

::google::protobuf::uint8* PlanningConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:planning.PlanningConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .planning.ReferenceLineProviderConfig refline_provider_config = 1;
  if (this->has_refline_provider_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_refline_provider_config(), deterministic, target);
  }

  // .planning.FpPathPlanConfig fp_path_plan_config = 2;
  if (this->has_fp_path_plan_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_fp_path_plan_config(), deterministic, target);
  }

  // .perception.OgmConfig ogm_config = 3;
  if (this->has_ogm_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_ogm_config(), deterministic, target);
  }

  // .planning.PolySpeedPlanConfig poly_speed_plan_config = 4;
  if (this->has_poly_speed_plan_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_poly_speed_plan_config(), deterministic, target);
  }

  // .planning.TrajectoryStitchingConfig traj_stitching_config = 5;
  if (this->has_traj_stitching_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_traj_stitching_config(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning.PlanningConfig)
  return target;
}

size_t PlanningConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning.PlanningConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .planning.ReferenceLineProviderConfig refline_provider_config = 1;
  if (this->has_refline_provider_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *refline_provider_config_);
  }

  // .planning.FpPathPlanConfig fp_path_plan_config = 2;
  if (this->has_fp_path_plan_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *fp_path_plan_config_);
  }

  // .perception.OgmConfig ogm_config = 3;
  if (this->has_ogm_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ogm_config_);
  }

  // .planning.PolySpeedPlanConfig poly_speed_plan_config = 4;
  if (this->has_poly_speed_plan_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *poly_speed_plan_config_);
  }

  // .planning.TrajectoryStitchingConfig traj_stitching_config = 5;
  if (this->has_traj_stitching_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *traj_stitching_config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlanningConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning.PlanningConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PlanningConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlanningConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning.PlanningConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning.PlanningConfig)
    MergeFrom(*source);
  }
}

void PlanningConfig::MergeFrom(const PlanningConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning.PlanningConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_refline_provider_config()) {
    mutable_refline_provider_config()->::planning::ReferenceLineProviderConfig::MergeFrom(from.refline_provider_config());
  }
  if (from.has_fp_path_plan_config()) {
    mutable_fp_path_plan_config()->::planning::FpPathPlanConfig::MergeFrom(from.fp_path_plan_config());
  }
  if (from.has_ogm_config()) {
    mutable_ogm_config()->::perception::OgmConfig::MergeFrom(from.ogm_config());
  }
  if (from.has_poly_speed_plan_config()) {
    mutable_poly_speed_plan_config()->::planning::PolySpeedPlanConfig::MergeFrom(from.poly_speed_plan_config());
  }
  if (from.has_traj_stitching_config()) {
    mutable_traj_stitching_config()->::planning::TrajectoryStitchingConfig::MergeFrom(from.traj_stitching_config());
  }
}

void PlanningConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning.PlanningConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanningConfig::CopyFrom(const PlanningConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning.PlanningConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanningConfig::IsInitialized() const {
  return true;
}

void PlanningConfig::Swap(PlanningConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlanningConfig::InternalSwap(PlanningConfig* other) {
  using std::swap;
  swap(refline_provider_config_, other->refline_provider_config_);
  swap(fp_path_plan_config_, other->fp_path_plan_config_);
  swap(ogm_config_, other->ogm_config_);
  swap(poly_speed_plan_config_, other->poly_speed_plan_config_);
  swap(traj_stitching_config_, other->traj_stitching_config_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PlanningConfig::GetMetadata() const {
  protobuf_planning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_2fproto_2fplanning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::planning::TrajectoryStitchingConfig* Arena::CreateMaybeMessage< ::planning::TrajectoryStitchingConfig >(Arena* arena) {
  return Arena::CreateInternal< ::planning::TrajectoryStitchingConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::planning::PlanningConfig* Arena::CreateMaybeMessage< ::planning::PlanningConfig >(Arena* arena) {
  return Arena::CreateInternal< ::planning::PlanningConfig >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
