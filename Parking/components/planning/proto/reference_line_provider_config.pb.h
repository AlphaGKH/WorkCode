// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planning/proto/reference_line_provider_config.proto

#ifndef PROTOBUF_INCLUDED_planning_2fproto_2freference_5fline_5fprovider_5fconfig_2eproto
#define PROTOBUF_INCLUDED_planning_2fproto_2freference_5fline_5fprovider_5fconfig_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_planning_2fproto_2freference_5fline_5fprovider_5fconfig_2eproto 

namespace protobuf_planning_2fproto_2freference_5fline_5fprovider_5fconfig_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_planning_2fproto_2freference_5fline_5fprovider_5fconfig_2eproto
namespace planning {
class QpSplineSmootherConfig;
class QpSplineSmootherConfigDefaultTypeInternal;
extern QpSplineSmootherConfigDefaultTypeInternal _QpSplineSmootherConfig_default_instance_;
class ReferenceLineProviderConfig;
class ReferenceLineProviderConfigDefaultTypeInternal;
extern ReferenceLineProviderConfigDefaultTypeInternal _ReferenceLineProviderConfig_default_instance_;
class ReferenceLineSmootherConfig;
class ReferenceLineSmootherConfigDefaultTypeInternal;
extern ReferenceLineSmootherConfigDefaultTypeInternal _ReferenceLineSmootherConfig_default_instance_;
}  // namespace planning
namespace google {
namespace protobuf {
template<> ::planning::QpSplineSmootherConfig* Arena::CreateMaybeMessage<::planning::QpSplineSmootherConfig>(Arena*);
template<> ::planning::ReferenceLineProviderConfig* Arena::CreateMaybeMessage<::planning::ReferenceLineProviderConfig>(Arena*);
template<> ::planning::ReferenceLineSmootherConfig* Arena::CreateMaybeMessage<::planning::ReferenceLineSmootherConfig>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace planning {

// ===================================================================

class QpSplineSmootherConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:planning.QpSplineSmootherConfig) */ {
 public:
  QpSplineSmootherConfig();
  virtual ~QpSplineSmootherConfig();

  QpSplineSmootherConfig(const QpSplineSmootherConfig& from);

  inline QpSplineSmootherConfig& operator=(const QpSplineSmootherConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QpSplineSmootherConfig(QpSplineSmootherConfig&& from) noexcept
    : QpSplineSmootherConfig() {
    *this = ::std::move(from);
  }

  inline QpSplineSmootherConfig& operator=(QpSplineSmootherConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QpSplineSmootherConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QpSplineSmootherConfig* internal_default_instance() {
    return reinterpret_cast<const QpSplineSmootherConfig*>(
               &_QpSplineSmootherConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(QpSplineSmootherConfig* other);
  friend void swap(QpSplineSmootherConfig& a, QpSplineSmootherConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QpSplineSmootherConfig* New() const final {
    return CreateMaybeMessage<QpSplineSmootherConfig>(NULL);
  }

  QpSplineSmootherConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QpSplineSmootherConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QpSplineSmootherConfig& from);
  void MergeFrom(const QpSplineSmootherConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QpSplineSmootherConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double max_spline_length = 2;
  void clear_max_spline_length();
  static const int kMaxSplineLengthFieldNumber = 2;
  double max_spline_length() const;
  void set_max_spline_length(double value);

  // double regularization_weight = 3;
  void clear_regularization_weight();
  static const int kRegularizationWeightFieldNumber = 3;
  double regularization_weight() const;
  void set_regularization_weight(double value);

  // double second_derivative_weight = 4;
  void clear_second_derivative_weight();
  static const int kSecondDerivativeWeightFieldNumber = 4;
  double second_derivative_weight() const;
  void set_second_derivative_weight(double value);

  // double third_derivative_weight = 5;
  void clear_third_derivative_weight();
  static const int kThirdDerivativeWeightFieldNumber = 5;
  double third_derivative_weight() const;
  void set_third_derivative_weight(double value);

  // uint32 spline_order = 1;
  void clear_spline_order();
  static const int kSplineOrderFieldNumber = 1;
  ::google::protobuf::uint32 spline_order() const;
  void set_spline_order(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:planning.QpSplineSmootherConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double max_spline_length_;
  double regularization_weight_;
  double second_derivative_weight_;
  double third_derivative_weight_;
  ::google::protobuf::uint32 spline_order_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_planning_2fproto_2freference_5fline_5fprovider_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReferenceLineSmootherConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:planning.ReferenceLineSmootherConfig) */ {
 public:
  ReferenceLineSmootherConfig();
  virtual ~ReferenceLineSmootherConfig();

  ReferenceLineSmootherConfig(const ReferenceLineSmootherConfig& from);

  inline ReferenceLineSmootherConfig& operator=(const ReferenceLineSmootherConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReferenceLineSmootherConfig(ReferenceLineSmootherConfig&& from) noexcept
    : ReferenceLineSmootherConfig() {
    *this = ::std::move(from);
  }

  inline ReferenceLineSmootherConfig& operator=(ReferenceLineSmootherConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReferenceLineSmootherConfig& default_instance();

  enum SmootherConfigCase {
    kQpSpline = 7,
    SMOOTHERCONFIG_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReferenceLineSmootherConfig* internal_default_instance() {
    return reinterpret_cast<const ReferenceLineSmootherConfig*>(
               &_ReferenceLineSmootherConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ReferenceLineSmootherConfig* other);
  friend void swap(ReferenceLineSmootherConfig& a, ReferenceLineSmootherConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReferenceLineSmootherConfig* New() const final {
    return CreateMaybeMessage<ReferenceLineSmootherConfig>(NULL);
  }

  ReferenceLineSmootherConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReferenceLineSmootherConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReferenceLineSmootherConfig& from);
  void MergeFrom(const ReferenceLineSmootherConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReferenceLineSmootherConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double max_constraint_interval = 1;
  void clear_max_constraint_interval();
  static const int kMaxConstraintIntervalFieldNumber = 1;
  double max_constraint_interval() const;
  void set_max_constraint_interval(double value);

  // double longitudinal_boundary_bound = 2;
  void clear_longitudinal_boundary_bound();
  static const int kLongitudinalBoundaryBoundFieldNumber = 2;
  double longitudinal_boundary_bound() const;
  void set_longitudinal_boundary_bound(double value);

  // double lateral_boundary_bound = 3;
  void clear_lateral_boundary_bound();
  static const int kLateralBoundaryBoundFieldNumber = 3;
  double lateral_boundary_bound() const;
  void set_lateral_boundary_bound(double value);

  // double wide_lane_threshold_factor = 5;
  void clear_wide_lane_threshold_factor();
  static const int kWideLaneThresholdFactorFieldNumber = 5;
  double wide_lane_threshold_factor() const;
  void set_wide_lane_threshold_factor(double value);

  // double wide_lane_shift_remain_factor = 6;
  void clear_wide_lane_shift_remain_factor();
  static const int kWideLaneShiftRemainFactorFieldNumber = 6;
  double wide_lane_shift_remain_factor() const;
  void set_wide_lane_shift_remain_factor(double value);

  // uint32 num_of_total_points = 4;
  void clear_num_of_total_points();
  static const int kNumOfTotalPointsFieldNumber = 4;
  ::google::protobuf::uint32 num_of_total_points() const;
  void set_num_of_total_points(::google::protobuf::uint32 value);

  // .planning.QpSplineSmootherConfig qp_spline = 7;
  bool has_qp_spline() const;
  void clear_qp_spline();
  static const int kQpSplineFieldNumber = 7;
  private:
  const ::planning::QpSplineSmootherConfig& _internal_qp_spline() const;
  public:
  const ::planning::QpSplineSmootherConfig& qp_spline() const;
  ::planning::QpSplineSmootherConfig* release_qp_spline();
  ::planning::QpSplineSmootherConfig* mutable_qp_spline();
  void set_allocated_qp_spline(::planning::QpSplineSmootherConfig* qp_spline);

  void clear_SmootherConfig();
  SmootherConfigCase SmootherConfig_case() const;
  // @@protoc_insertion_point(class_scope:planning.ReferenceLineSmootherConfig)
 private:
  void set_has_qp_spline();

  inline bool has_SmootherConfig() const;
  inline void clear_has_SmootherConfig();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double max_constraint_interval_;
  double longitudinal_boundary_bound_;
  double lateral_boundary_bound_;
  double wide_lane_threshold_factor_;
  double wide_lane_shift_remain_factor_;
  ::google::protobuf::uint32 num_of_total_points_;
  union SmootherConfigUnion {
    SmootherConfigUnion() {}
    ::planning::QpSplineSmootherConfig* qp_spline_;
  } SmootherConfig_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_planning_2fproto_2freference_5fline_5fprovider_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReferenceLineProviderConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:planning.ReferenceLineProviderConfig) */ {
 public:
  ReferenceLineProviderConfig();
  virtual ~ReferenceLineProviderConfig();

  ReferenceLineProviderConfig(const ReferenceLineProviderConfig& from);

  inline ReferenceLineProviderConfig& operator=(const ReferenceLineProviderConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReferenceLineProviderConfig(ReferenceLineProviderConfig&& from) noexcept
    : ReferenceLineProviderConfig() {
    *this = ::std::move(from);
  }

  inline ReferenceLineProviderConfig& operator=(ReferenceLineProviderConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReferenceLineProviderConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReferenceLineProviderConfig* internal_default_instance() {
    return reinterpret_cast<const ReferenceLineProviderConfig*>(
               &_ReferenceLineProviderConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ReferenceLineProviderConfig* other);
  friend void swap(ReferenceLineProviderConfig& a, ReferenceLineProviderConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReferenceLineProviderConfig* New() const final {
    return CreateMaybeMessage<ReferenceLineProviderConfig>(NULL);
  }

  ReferenceLineProviderConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReferenceLineProviderConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReferenceLineProviderConfig& from);
  void MergeFrom(const ReferenceLineProviderConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReferenceLineProviderConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .planning.ReferenceLineSmootherConfig smooth_config = 1;
  bool has_smooth_config() const;
  void clear_smooth_config();
  static const int kSmoothConfigFieldNumber = 1;
  private:
  const ::planning::ReferenceLineSmootherConfig& _internal_smooth_config() const;
  public:
  const ::planning::ReferenceLineSmootherConfig& smooth_config() const;
  ::planning::ReferenceLineSmootherConfig* release_smooth_config();
  ::planning::ReferenceLineSmootherConfig* mutable_smooth_config();
  void set_allocated_smooth_config(::planning::ReferenceLineSmootherConfig* smooth_config);

  // bool enable_reference_line_stitching = 2;
  void clear_enable_reference_line_stitching();
  static const int kEnableReferenceLineStitchingFieldNumber = 2;
  bool enable_reference_line_stitching() const;
  void set_enable_reference_line_stitching(bool value);

  // bool enable_smooth_reference_line = 3;
  void clear_enable_smooth_reference_line();
  static const int kEnableSmoothReferenceLineFieldNumber = 3;
  bool enable_smooth_reference_line() const;
  void set_enable_smooth_reference_line(bool value);

  // uint32 update_counter = 5;
  void clear_update_counter();
  static const int kUpdateCounterFieldNumber = 5;
  ::google::protobuf::uint32 update_counter() const;
  void set_update_counter(::google::protobuf::uint32 value);

  // double smoothed_reference_line_max_diff = 4;
  void clear_smoothed_reference_line_max_diff();
  static const int kSmoothedReferenceLineMaxDiffFieldNumber = 4;
  double smoothed_reference_line_max_diff() const;
  void set_smoothed_reference_line_max_diff(double value);

  // @@protoc_insertion_point(class_scope:planning.ReferenceLineProviderConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::planning::ReferenceLineSmootherConfig* smooth_config_;
  bool enable_reference_line_stitching_;
  bool enable_smooth_reference_line_;
  ::google::protobuf::uint32 update_counter_;
  double smoothed_reference_line_max_diff_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_planning_2fproto_2freference_5fline_5fprovider_5fconfig_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// QpSplineSmootherConfig

// uint32 spline_order = 1;
inline void QpSplineSmootherConfig::clear_spline_order() {
  spline_order_ = 0u;
}
inline ::google::protobuf::uint32 QpSplineSmootherConfig::spline_order() const {
  // @@protoc_insertion_point(field_get:planning.QpSplineSmootherConfig.spline_order)
  return spline_order_;
}
inline void QpSplineSmootherConfig::set_spline_order(::google::protobuf::uint32 value) {
  
  spline_order_ = value;
  // @@protoc_insertion_point(field_set:planning.QpSplineSmootherConfig.spline_order)
}

// double max_spline_length = 2;
inline void QpSplineSmootherConfig::clear_max_spline_length() {
  max_spline_length_ = 0;
}
inline double QpSplineSmootherConfig::max_spline_length() const {
  // @@protoc_insertion_point(field_get:planning.QpSplineSmootherConfig.max_spline_length)
  return max_spline_length_;
}
inline void QpSplineSmootherConfig::set_max_spline_length(double value) {
  
  max_spline_length_ = value;
  // @@protoc_insertion_point(field_set:planning.QpSplineSmootherConfig.max_spline_length)
}

// double regularization_weight = 3;
inline void QpSplineSmootherConfig::clear_regularization_weight() {
  regularization_weight_ = 0;
}
inline double QpSplineSmootherConfig::regularization_weight() const {
  // @@protoc_insertion_point(field_get:planning.QpSplineSmootherConfig.regularization_weight)
  return regularization_weight_;
}
inline void QpSplineSmootherConfig::set_regularization_weight(double value) {
  
  regularization_weight_ = value;
  // @@protoc_insertion_point(field_set:planning.QpSplineSmootherConfig.regularization_weight)
}

// double second_derivative_weight = 4;
inline void QpSplineSmootherConfig::clear_second_derivative_weight() {
  second_derivative_weight_ = 0;
}
inline double QpSplineSmootherConfig::second_derivative_weight() const {
  // @@protoc_insertion_point(field_get:planning.QpSplineSmootherConfig.second_derivative_weight)
  return second_derivative_weight_;
}
inline void QpSplineSmootherConfig::set_second_derivative_weight(double value) {
  
  second_derivative_weight_ = value;
  // @@protoc_insertion_point(field_set:planning.QpSplineSmootherConfig.second_derivative_weight)
}

// double third_derivative_weight = 5;
inline void QpSplineSmootherConfig::clear_third_derivative_weight() {
  third_derivative_weight_ = 0;
}
inline double QpSplineSmootherConfig::third_derivative_weight() const {
  // @@protoc_insertion_point(field_get:planning.QpSplineSmootherConfig.third_derivative_weight)
  return third_derivative_weight_;
}
inline void QpSplineSmootherConfig::set_third_derivative_weight(double value) {
  
  third_derivative_weight_ = value;
  // @@protoc_insertion_point(field_set:planning.QpSplineSmootherConfig.third_derivative_weight)
}

// -------------------------------------------------------------------

// ReferenceLineSmootherConfig

// double max_constraint_interval = 1;
inline void ReferenceLineSmootherConfig::clear_max_constraint_interval() {
  max_constraint_interval_ = 0;
}
inline double ReferenceLineSmootherConfig::max_constraint_interval() const {
  // @@protoc_insertion_point(field_get:planning.ReferenceLineSmootherConfig.max_constraint_interval)
  return max_constraint_interval_;
}
inline void ReferenceLineSmootherConfig::set_max_constraint_interval(double value) {
  
  max_constraint_interval_ = value;
  // @@protoc_insertion_point(field_set:planning.ReferenceLineSmootherConfig.max_constraint_interval)
}

// double longitudinal_boundary_bound = 2;
inline void ReferenceLineSmootherConfig::clear_longitudinal_boundary_bound() {
  longitudinal_boundary_bound_ = 0;
}
inline double ReferenceLineSmootherConfig::longitudinal_boundary_bound() const {
  // @@protoc_insertion_point(field_get:planning.ReferenceLineSmootherConfig.longitudinal_boundary_bound)
  return longitudinal_boundary_bound_;
}
inline void ReferenceLineSmootherConfig::set_longitudinal_boundary_bound(double value) {
  
  longitudinal_boundary_bound_ = value;
  // @@protoc_insertion_point(field_set:planning.ReferenceLineSmootherConfig.longitudinal_boundary_bound)
}

// double lateral_boundary_bound = 3;
inline void ReferenceLineSmootherConfig::clear_lateral_boundary_bound() {
  lateral_boundary_bound_ = 0;
}
inline double ReferenceLineSmootherConfig::lateral_boundary_bound() const {
  // @@protoc_insertion_point(field_get:planning.ReferenceLineSmootherConfig.lateral_boundary_bound)
  return lateral_boundary_bound_;
}
inline void ReferenceLineSmootherConfig::set_lateral_boundary_bound(double value) {
  
  lateral_boundary_bound_ = value;
  // @@protoc_insertion_point(field_set:planning.ReferenceLineSmootherConfig.lateral_boundary_bound)
}

// uint32 num_of_total_points = 4;
inline void ReferenceLineSmootherConfig::clear_num_of_total_points() {
  num_of_total_points_ = 0u;
}
inline ::google::protobuf::uint32 ReferenceLineSmootherConfig::num_of_total_points() const {
  // @@protoc_insertion_point(field_get:planning.ReferenceLineSmootherConfig.num_of_total_points)
  return num_of_total_points_;
}
inline void ReferenceLineSmootherConfig::set_num_of_total_points(::google::protobuf::uint32 value) {
  
  num_of_total_points_ = value;
  // @@protoc_insertion_point(field_set:planning.ReferenceLineSmootherConfig.num_of_total_points)
}

// double wide_lane_threshold_factor = 5;
inline void ReferenceLineSmootherConfig::clear_wide_lane_threshold_factor() {
  wide_lane_threshold_factor_ = 0;
}
inline double ReferenceLineSmootherConfig::wide_lane_threshold_factor() const {
  // @@protoc_insertion_point(field_get:planning.ReferenceLineSmootherConfig.wide_lane_threshold_factor)
  return wide_lane_threshold_factor_;
}
inline void ReferenceLineSmootherConfig::set_wide_lane_threshold_factor(double value) {
  
  wide_lane_threshold_factor_ = value;
  // @@protoc_insertion_point(field_set:planning.ReferenceLineSmootherConfig.wide_lane_threshold_factor)
}

// double wide_lane_shift_remain_factor = 6;
inline void ReferenceLineSmootherConfig::clear_wide_lane_shift_remain_factor() {
  wide_lane_shift_remain_factor_ = 0;
}
inline double ReferenceLineSmootherConfig::wide_lane_shift_remain_factor() const {
  // @@protoc_insertion_point(field_get:planning.ReferenceLineSmootherConfig.wide_lane_shift_remain_factor)
  return wide_lane_shift_remain_factor_;
}
inline void ReferenceLineSmootherConfig::set_wide_lane_shift_remain_factor(double value) {
  
  wide_lane_shift_remain_factor_ = value;
  // @@protoc_insertion_point(field_set:planning.ReferenceLineSmootherConfig.wide_lane_shift_remain_factor)
}

// .planning.QpSplineSmootherConfig qp_spline = 7;
inline bool ReferenceLineSmootherConfig::has_qp_spline() const {
  return SmootherConfig_case() == kQpSpline;
}
inline void ReferenceLineSmootherConfig::set_has_qp_spline() {
  _oneof_case_[0] = kQpSpline;
}
inline void ReferenceLineSmootherConfig::clear_qp_spline() {
  if (has_qp_spline()) {
    delete SmootherConfig_.qp_spline_;
    clear_has_SmootherConfig();
  }
}
inline const ::planning::QpSplineSmootherConfig& ReferenceLineSmootherConfig::_internal_qp_spline() const {
  return *SmootherConfig_.qp_spline_;
}
inline ::planning::QpSplineSmootherConfig* ReferenceLineSmootherConfig::release_qp_spline() {
  // @@protoc_insertion_point(field_release:planning.ReferenceLineSmootherConfig.qp_spline)
  if (has_qp_spline()) {
    clear_has_SmootherConfig();
      ::planning::QpSplineSmootherConfig* temp = SmootherConfig_.qp_spline_;
    SmootherConfig_.qp_spline_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::planning::QpSplineSmootherConfig& ReferenceLineSmootherConfig::qp_spline() const {
  // @@protoc_insertion_point(field_get:planning.ReferenceLineSmootherConfig.qp_spline)
  return has_qp_spline()
      ? *SmootherConfig_.qp_spline_
      : *reinterpret_cast< ::planning::QpSplineSmootherConfig*>(&::planning::_QpSplineSmootherConfig_default_instance_);
}
inline ::planning::QpSplineSmootherConfig* ReferenceLineSmootherConfig::mutable_qp_spline() {
  if (!has_qp_spline()) {
    clear_SmootherConfig();
    set_has_qp_spline();
    SmootherConfig_.qp_spline_ = CreateMaybeMessage< ::planning::QpSplineSmootherConfig >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:planning.ReferenceLineSmootherConfig.qp_spline)
  return SmootherConfig_.qp_spline_;
}

inline bool ReferenceLineSmootherConfig::has_SmootherConfig() const {
  return SmootherConfig_case() != SMOOTHERCONFIG_NOT_SET;
}
inline void ReferenceLineSmootherConfig::clear_has_SmootherConfig() {
  _oneof_case_[0] = SMOOTHERCONFIG_NOT_SET;
}
inline ReferenceLineSmootherConfig::SmootherConfigCase ReferenceLineSmootherConfig::SmootherConfig_case() const {
  return ReferenceLineSmootherConfig::SmootherConfigCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ReferenceLineProviderConfig

// .planning.ReferenceLineSmootherConfig smooth_config = 1;
inline bool ReferenceLineProviderConfig::has_smooth_config() const {
  return this != internal_default_instance() && smooth_config_ != NULL;
}
inline void ReferenceLineProviderConfig::clear_smooth_config() {
  if (GetArenaNoVirtual() == NULL && smooth_config_ != NULL) {
    delete smooth_config_;
  }
  smooth_config_ = NULL;
}
inline const ::planning::ReferenceLineSmootherConfig& ReferenceLineProviderConfig::_internal_smooth_config() const {
  return *smooth_config_;
}
inline const ::planning::ReferenceLineSmootherConfig& ReferenceLineProviderConfig::smooth_config() const {
  const ::planning::ReferenceLineSmootherConfig* p = smooth_config_;
  // @@protoc_insertion_point(field_get:planning.ReferenceLineProviderConfig.smooth_config)
  return p != NULL ? *p : *reinterpret_cast<const ::planning::ReferenceLineSmootherConfig*>(
      &::planning::_ReferenceLineSmootherConfig_default_instance_);
}
inline ::planning::ReferenceLineSmootherConfig* ReferenceLineProviderConfig::release_smooth_config() {
  // @@protoc_insertion_point(field_release:planning.ReferenceLineProviderConfig.smooth_config)
  
  ::planning::ReferenceLineSmootherConfig* temp = smooth_config_;
  smooth_config_ = NULL;
  return temp;
}
inline ::planning::ReferenceLineSmootherConfig* ReferenceLineProviderConfig::mutable_smooth_config() {
  
  if (smooth_config_ == NULL) {
    auto* p = CreateMaybeMessage<::planning::ReferenceLineSmootherConfig>(GetArenaNoVirtual());
    smooth_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:planning.ReferenceLineProviderConfig.smooth_config)
  return smooth_config_;
}
inline void ReferenceLineProviderConfig::set_allocated_smooth_config(::planning::ReferenceLineSmootherConfig* smooth_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete smooth_config_;
  }
  if (smooth_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      smooth_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, smooth_config, submessage_arena);
    }
    
  } else {
    
  }
  smooth_config_ = smooth_config;
  // @@protoc_insertion_point(field_set_allocated:planning.ReferenceLineProviderConfig.smooth_config)
}

// bool enable_reference_line_stitching = 2;
inline void ReferenceLineProviderConfig::clear_enable_reference_line_stitching() {
  enable_reference_line_stitching_ = false;
}
inline bool ReferenceLineProviderConfig::enable_reference_line_stitching() const {
  // @@protoc_insertion_point(field_get:planning.ReferenceLineProviderConfig.enable_reference_line_stitching)
  return enable_reference_line_stitching_;
}
inline void ReferenceLineProviderConfig::set_enable_reference_line_stitching(bool value) {
  
  enable_reference_line_stitching_ = value;
  // @@protoc_insertion_point(field_set:planning.ReferenceLineProviderConfig.enable_reference_line_stitching)
}

// bool enable_smooth_reference_line = 3;
inline void ReferenceLineProviderConfig::clear_enable_smooth_reference_line() {
  enable_smooth_reference_line_ = false;
}
inline bool ReferenceLineProviderConfig::enable_smooth_reference_line() const {
  // @@protoc_insertion_point(field_get:planning.ReferenceLineProviderConfig.enable_smooth_reference_line)
  return enable_smooth_reference_line_;
}
inline void ReferenceLineProviderConfig::set_enable_smooth_reference_line(bool value) {
  
  enable_smooth_reference_line_ = value;
  // @@protoc_insertion_point(field_set:planning.ReferenceLineProviderConfig.enable_smooth_reference_line)
}

// double smoothed_reference_line_max_diff = 4;
inline void ReferenceLineProviderConfig::clear_smoothed_reference_line_max_diff() {
  smoothed_reference_line_max_diff_ = 0;
}
inline double ReferenceLineProviderConfig::smoothed_reference_line_max_diff() const {
  // @@protoc_insertion_point(field_get:planning.ReferenceLineProviderConfig.smoothed_reference_line_max_diff)
  return smoothed_reference_line_max_diff_;
}
inline void ReferenceLineProviderConfig::set_smoothed_reference_line_max_diff(double value) {
  
  smoothed_reference_line_max_diff_ = value;
  // @@protoc_insertion_point(field_set:planning.ReferenceLineProviderConfig.smoothed_reference_line_max_diff)
}

// uint32 update_counter = 5;
inline void ReferenceLineProviderConfig::clear_update_counter() {
  update_counter_ = 0u;
}
inline ::google::protobuf::uint32 ReferenceLineProviderConfig::update_counter() const {
  // @@protoc_insertion_point(field_get:planning.ReferenceLineProviderConfig.update_counter)
  return update_counter_;
}
inline void ReferenceLineProviderConfig::set_update_counter(::google::protobuf::uint32 value) {
  
  update_counter_ = value;
  // @@protoc_insertion_point(field_set:planning.ReferenceLineProviderConfig.update_counter)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace planning

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_planning_2fproto_2freference_5fline_5fprovider_5fconfig_2eproto
