// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planning/proto/poly_speed_plan_config.proto

#ifndef PROTOBUF_INCLUDED_planning_2fproto_2fpoly_5fspeed_5fplan_5fconfig_2eproto
#define PROTOBUF_INCLUDED_planning_2fproto_2fpoly_5fspeed_5fplan_5fconfig_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_planning_2fproto_2fpoly_5fspeed_5fplan_5fconfig_2eproto 

namespace protobuf_planning_2fproto_2fpoly_5fspeed_5fplan_5fconfig_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_planning_2fproto_2fpoly_5fspeed_5fplan_5fconfig_2eproto
namespace planning {
class PolySpeedCostParam;
class PolySpeedCostParamDefaultTypeInternal;
extern PolySpeedCostParamDefaultTypeInternal _PolySpeedCostParam_default_instance_;
class PolySpeedPlanConfig;
class PolySpeedPlanConfigDefaultTypeInternal;
extern PolySpeedPlanConfigDefaultTypeInternal _PolySpeedPlanConfig_default_instance_;
class PolySpeedSampleConfig;
class PolySpeedSampleConfigDefaultTypeInternal;
extern PolySpeedSampleConfigDefaultTypeInternal _PolySpeedSampleConfig_default_instance_;
}  // namespace planning
namespace google {
namespace protobuf {
template<> ::planning::PolySpeedCostParam* Arena::CreateMaybeMessage<::planning::PolySpeedCostParam>(Arena*);
template<> ::planning::PolySpeedPlanConfig* Arena::CreateMaybeMessage<::planning::PolySpeedPlanConfig>(Arena*);
template<> ::planning::PolySpeedSampleConfig* Arena::CreateMaybeMessage<::planning::PolySpeedSampleConfig>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace planning {

// ===================================================================

class PolySpeedSampleConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:planning.PolySpeedSampleConfig) */ {
 public:
  PolySpeedSampleConfig();
  virtual ~PolySpeedSampleConfig();

  PolySpeedSampleConfig(const PolySpeedSampleConfig& from);

  inline PolySpeedSampleConfig& operator=(const PolySpeedSampleConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PolySpeedSampleConfig(PolySpeedSampleConfig&& from) noexcept
    : PolySpeedSampleConfig() {
    *this = ::std::move(from);
  }

  inline PolySpeedSampleConfig& operator=(PolySpeedSampleConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PolySpeedSampleConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PolySpeedSampleConfig* internal_default_instance() {
    return reinterpret_cast<const PolySpeedSampleConfig*>(
               &_PolySpeedSampleConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PolySpeedSampleConfig* other);
  friend void swap(PolySpeedSampleConfig& a, PolySpeedSampleConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PolySpeedSampleConfig* New() const final {
    return CreateMaybeMessage<PolySpeedSampleConfig>(NULL);
  }

  PolySpeedSampleConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PolySpeedSampleConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PolySpeedSampleConfig& from);
  void MergeFrom(const PolySpeedSampleConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PolySpeedSampleConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double time_length = 1;
  void clear_time_length();
  static const int kTimeLengthFieldNumber = 1;
  double time_length() const;
  void set_time_length(double value);

  // double time_density = 2;
  void clear_time_density();
  static const int kTimeDensityFieldNumber = 2;
  double time_density() const;
  void set_time_density(double value);

  // double lon_buffer = 3;
  void clear_lon_buffer();
  static const int kLonBufferFieldNumber = 3;
  double lon_buffer() const;
  void set_lon_buffer(double value);

  // int32 num_sample_follow_per_timestamp = 4;
  void clear_num_sample_follow_per_timestamp();
  static const int kNumSampleFollowPerTimestampFieldNumber = 4;
  ::google::protobuf::int32 num_sample_follow_per_timestamp() const;
  void set_num_sample_follow_per_timestamp(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:planning.PolySpeedSampleConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double time_length_;
  double time_density_;
  double lon_buffer_;
  ::google::protobuf::int32 num_sample_follow_per_timestamp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_planning_2fproto_2fpoly_5fspeed_5fplan_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PolySpeedCostParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:planning.PolySpeedCostParam) */ {
 public:
  PolySpeedCostParam();
  virtual ~PolySpeedCostParam();

  PolySpeedCostParam(const PolySpeedCostParam& from);

  inline PolySpeedCostParam& operator=(const PolySpeedCostParam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PolySpeedCostParam(PolySpeedCostParam&& from) noexcept
    : PolySpeedCostParam() {
    *this = ::std::move(from);
  }

  inline PolySpeedCostParam& operator=(PolySpeedCostParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PolySpeedCostParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PolySpeedCostParam* internal_default_instance() {
    return reinterpret_cast<const PolySpeedCostParam*>(
               &_PolySpeedCostParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(PolySpeedCostParam* other);
  friend void swap(PolySpeedCostParam& a, PolySpeedCostParam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PolySpeedCostParam* New() const final {
    return CreateMaybeMessage<PolySpeedCostParam>(NULL);
  }

  PolySpeedCostParam* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PolySpeedCostParam>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PolySpeedCostParam& from);
  void MergeFrom(const PolySpeedCostParam& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PolySpeedCostParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double acc_weight = 1;
  void clear_acc_weight();
  static const int kAccWeightFieldNumber = 1;
  double acc_weight() const;
  void set_acc_weight(double value);

  // double jerk_weight = 2;
  void clear_jerk_weight();
  static const int kJerkWeightFieldNumber = 2;
  double jerk_weight() const;
  void set_jerk_weight(double value);

  // @@protoc_insertion_point(class_scope:planning.PolySpeedCostParam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double acc_weight_;
  double jerk_weight_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_planning_2fproto_2fpoly_5fspeed_5fplan_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PolySpeedPlanConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:planning.PolySpeedPlanConfig) */ {
 public:
  PolySpeedPlanConfig();
  virtual ~PolySpeedPlanConfig();

  PolySpeedPlanConfig(const PolySpeedPlanConfig& from);

  inline PolySpeedPlanConfig& operator=(const PolySpeedPlanConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PolySpeedPlanConfig(PolySpeedPlanConfig&& from) noexcept
    : PolySpeedPlanConfig() {
    *this = ::std::move(from);
  }

  inline PolySpeedPlanConfig& operator=(PolySpeedPlanConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PolySpeedPlanConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PolySpeedPlanConfig* internal_default_instance() {
    return reinterpret_cast<const PolySpeedPlanConfig*>(
               &_PolySpeedPlanConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(PolySpeedPlanConfig* other);
  friend void swap(PolySpeedPlanConfig& a, PolySpeedPlanConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PolySpeedPlanConfig* New() const final {
    return CreateMaybeMessage<PolySpeedPlanConfig>(NULL);
  }

  PolySpeedPlanConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PolySpeedPlanConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PolySpeedPlanConfig& from);
  void MergeFrom(const PolySpeedPlanConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PolySpeedPlanConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .planning.PolySpeedSampleConfig sample_config = 1;
  bool has_sample_config() const;
  void clear_sample_config();
  static const int kSampleConfigFieldNumber = 1;
  private:
  const ::planning::PolySpeedSampleConfig& _internal_sample_config() const;
  public:
  const ::planning::PolySpeedSampleConfig& sample_config() const;
  ::planning::PolySpeedSampleConfig* release_sample_config();
  ::planning::PolySpeedSampleConfig* mutable_sample_config();
  void set_allocated_sample_config(::planning::PolySpeedSampleConfig* sample_config);

  // .planning.PolySpeedCostParam cost_param = 2;
  bool has_cost_param() const;
  void clear_cost_param();
  static const int kCostParamFieldNumber = 2;
  private:
  const ::planning::PolySpeedCostParam& _internal_cost_param() const;
  public:
  const ::planning::PolySpeedCostParam& cost_param() const;
  ::planning::PolySpeedCostParam* release_cost_param();
  ::planning::PolySpeedCostParam* mutable_cost_param();
  void set_allocated_cost_param(::planning::PolySpeedCostParam* cost_param);

  // double top_speed = 3;
  void clear_top_speed();
  static const int kTopSpeedFieldNumber = 3;
  double top_speed() const;
  void set_top_speed(double value);

  // double max_acceleration = 4;
  void clear_max_acceleration();
  static const int kMaxAccelerationFieldNumber = 4;
  double max_acceleration() const;
  void set_max_acceleration(double value);

  // double max_deceleration = 5;
  void clear_max_deceleration();
  static const int kMaxDecelerationFieldNumber = 5;
  double max_deceleration() const;
  void set_max_deceleration(double value);

  // double keep_clear_low_speed_penalty = 6;
  void clear_keep_clear_low_speed_penalty();
  static const int kKeepClearLowSpeedPenaltyFieldNumber = 6;
  double keep_clear_low_speed_penalty() const;
  void set_keep_clear_low_speed_penalty(double value);

  // double default_speed_cost = 7;
  void clear_default_speed_cost();
  static const int kDefaultSpeedCostFieldNumber = 7;
  double default_speed_cost() const;
  void set_default_speed_cost(double value);

  // double exceed_speed_penalty = 8;
  void clear_exceed_speed_penalty();
  static const int kExceedSpeedPenaltyFieldNumber = 8;
  double exceed_speed_penalty() const;
  void set_exceed_speed_penalty(double value);

  // double low_speed_penalty = 9;
  void clear_low_speed_penalty();
  static const int kLowSpeedPenaltyFieldNumber = 9;
  double low_speed_penalty() const;
  void set_low_speed_penalty(double value);

  // double accel_penalty = 10;
  void clear_accel_penalty();
  static const int kAccelPenaltyFieldNumber = 10;
  double accel_penalty() const;
  void set_accel_penalty(double value);

  // double decel_penalty = 11;
  void clear_decel_penalty();
  static const int kDecelPenaltyFieldNumber = 11;
  double decel_penalty() const;
  void set_decel_penalty(double value);

  // double positive_jerk_coeff = 12;
  void clear_positive_jerk_coeff();
  static const int kPositiveJerkCoeffFieldNumber = 12;
  double positive_jerk_coeff() const;
  void set_positive_jerk_coeff(double value);

  // double negative_jerk_coeff = 13;
  void clear_negative_jerk_coeff();
  static const int kNegativeJerkCoeffFieldNumber = 13;
  double negative_jerk_coeff() const;
  void set_negative_jerk_coeff(double value);

  // @@protoc_insertion_point(class_scope:planning.PolySpeedPlanConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::planning::PolySpeedSampleConfig* sample_config_;
  ::planning::PolySpeedCostParam* cost_param_;
  double top_speed_;
  double max_acceleration_;
  double max_deceleration_;
  double keep_clear_low_speed_penalty_;
  double default_speed_cost_;
  double exceed_speed_penalty_;
  double low_speed_penalty_;
  double accel_penalty_;
  double decel_penalty_;
  double positive_jerk_coeff_;
  double negative_jerk_coeff_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_planning_2fproto_2fpoly_5fspeed_5fplan_5fconfig_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PolySpeedSampleConfig

// double time_length = 1;
inline void PolySpeedSampleConfig::clear_time_length() {
  time_length_ = 0;
}
inline double PolySpeedSampleConfig::time_length() const {
  // @@protoc_insertion_point(field_get:planning.PolySpeedSampleConfig.time_length)
  return time_length_;
}
inline void PolySpeedSampleConfig::set_time_length(double value) {
  
  time_length_ = value;
  // @@protoc_insertion_point(field_set:planning.PolySpeedSampleConfig.time_length)
}

// double time_density = 2;
inline void PolySpeedSampleConfig::clear_time_density() {
  time_density_ = 0;
}
inline double PolySpeedSampleConfig::time_density() const {
  // @@protoc_insertion_point(field_get:planning.PolySpeedSampleConfig.time_density)
  return time_density_;
}
inline void PolySpeedSampleConfig::set_time_density(double value) {
  
  time_density_ = value;
  // @@protoc_insertion_point(field_set:planning.PolySpeedSampleConfig.time_density)
}

// double lon_buffer = 3;
inline void PolySpeedSampleConfig::clear_lon_buffer() {
  lon_buffer_ = 0;
}
inline double PolySpeedSampleConfig::lon_buffer() const {
  // @@protoc_insertion_point(field_get:planning.PolySpeedSampleConfig.lon_buffer)
  return lon_buffer_;
}
inline void PolySpeedSampleConfig::set_lon_buffer(double value) {
  
  lon_buffer_ = value;
  // @@protoc_insertion_point(field_set:planning.PolySpeedSampleConfig.lon_buffer)
}

// int32 num_sample_follow_per_timestamp = 4;
inline void PolySpeedSampleConfig::clear_num_sample_follow_per_timestamp() {
  num_sample_follow_per_timestamp_ = 0;
}
inline ::google::protobuf::int32 PolySpeedSampleConfig::num_sample_follow_per_timestamp() const {
  // @@protoc_insertion_point(field_get:planning.PolySpeedSampleConfig.num_sample_follow_per_timestamp)
  return num_sample_follow_per_timestamp_;
}
inline void PolySpeedSampleConfig::set_num_sample_follow_per_timestamp(::google::protobuf::int32 value) {
  
  num_sample_follow_per_timestamp_ = value;
  // @@protoc_insertion_point(field_set:planning.PolySpeedSampleConfig.num_sample_follow_per_timestamp)
}

// -------------------------------------------------------------------

// PolySpeedCostParam

// double acc_weight = 1;
inline void PolySpeedCostParam::clear_acc_weight() {
  acc_weight_ = 0;
}
inline double PolySpeedCostParam::acc_weight() const {
  // @@protoc_insertion_point(field_get:planning.PolySpeedCostParam.acc_weight)
  return acc_weight_;
}
inline void PolySpeedCostParam::set_acc_weight(double value) {
  
  acc_weight_ = value;
  // @@protoc_insertion_point(field_set:planning.PolySpeedCostParam.acc_weight)
}

// double jerk_weight = 2;
inline void PolySpeedCostParam::clear_jerk_weight() {
  jerk_weight_ = 0;
}
inline double PolySpeedCostParam::jerk_weight() const {
  // @@protoc_insertion_point(field_get:planning.PolySpeedCostParam.jerk_weight)
  return jerk_weight_;
}
inline void PolySpeedCostParam::set_jerk_weight(double value) {
  
  jerk_weight_ = value;
  // @@protoc_insertion_point(field_set:planning.PolySpeedCostParam.jerk_weight)
}

// -------------------------------------------------------------------

// PolySpeedPlanConfig

// .planning.PolySpeedSampleConfig sample_config = 1;
inline bool PolySpeedPlanConfig::has_sample_config() const {
  return this != internal_default_instance() && sample_config_ != NULL;
}
inline void PolySpeedPlanConfig::clear_sample_config() {
  if (GetArenaNoVirtual() == NULL && sample_config_ != NULL) {
    delete sample_config_;
  }
  sample_config_ = NULL;
}
inline const ::planning::PolySpeedSampleConfig& PolySpeedPlanConfig::_internal_sample_config() const {
  return *sample_config_;
}
inline const ::planning::PolySpeedSampleConfig& PolySpeedPlanConfig::sample_config() const {
  const ::planning::PolySpeedSampleConfig* p = sample_config_;
  // @@protoc_insertion_point(field_get:planning.PolySpeedPlanConfig.sample_config)
  return p != NULL ? *p : *reinterpret_cast<const ::planning::PolySpeedSampleConfig*>(
      &::planning::_PolySpeedSampleConfig_default_instance_);
}
inline ::planning::PolySpeedSampleConfig* PolySpeedPlanConfig::release_sample_config() {
  // @@protoc_insertion_point(field_release:planning.PolySpeedPlanConfig.sample_config)
  
  ::planning::PolySpeedSampleConfig* temp = sample_config_;
  sample_config_ = NULL;
  return temp;
}
inline ::planning::PolySpeedSampleConfig* PolySpeedPlanConfig::mutable_sample_config() {
  
  if (sample_config_ == NULL) {
    auto* p = CreateMaybeMessage<::planning::PolySpeedSampleConfig>(GetArenaNoVirtual());
    sample_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:planning.PolySpeedPlanConfig.sample_config)
  return sample_config_;
}
inline void PolySpeedPlanConfig::set_allocated_sample_config(::planning::PolySpeedSampleConfig* sample_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete sample_config_;
  }
  if (sample_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sample_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sample_config, submessage_arena);
    }
    
  } else {
    
  }
  sample_config_ = sample_config;
  // @@protoc_insertion_point(field_set_allocated:planning.PolySpeedPlanConfig.sample_config)
}

// .planning.PolySpeedCostParam cost_param = 2;
inline bool PolySpeedPlanConfig::has_cost_param() const {
  return this != internal_default_instance() && cost_param_ != NULL;
}
inline void PolySpeedPlanConfig::clear_cost_param() {
  if (GetArenaNoVirtual() == NULL && cost_param_ != NULL) {
    delete cost_param_;
  }
  cost_param_ = NULL;
}
inline const ::planning::PolySpeedCostParam& PolySpeedPlanConfig::_internal_cost_param() const {
  return *cost_param_;
}
inline const ::planning::PolySpeedCostParam& PolySpeedPlanConfig::cost_param() const {
  const ::planning::PolySpeedCostParam* p = cost_param_;
  // @@protoc_insertion_point(field_get:planning.PolySpeedPlanConfig.cost_param)
  return p != NULL ? *p : *reinterpret_cast<const ::planning::PolySpeedCostParam*>(
      &::planning::_PolySpeedCostParam_default_instance_);
}
inline ::planning::PolySpeedCostParam* PolySpeedPlanConfig::release_cost_param() {
  // @@protoc_insertion_point(field_release:planning.PolySpeedPlanConfig.cost_param)
  
  ::planning::PolySpeedCostParam* temp = cost_param_;
  cost_param_ = NULL;
  return temp;
}
inline ::planning::PolySpeedCostParam* PolySpeedPlanConfig::mutable_cost_param() {
  
  if (cost_param_ == NULL) {
    auto* p = CreateMaybeMessage<::planning::PolySpeedCostParam>(GetArenaNoVirtual());
    cost_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:planning.PolySpeedPlanConfig.cost_param)
  return cost_param_;
}
inline void PolySpeedPlanConfig::set_allocated_cost_param(::planning::PolySpeedCostParam* cost_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete cost_param_;
  }
  if (cost_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cost_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cost_param, submessage_arena);
    }
    
  } else {
    
  }
  cost_param_ = cost_param;
  // @@protoc_insertion_point(field_set_allocated:planning.PolySpeedPlanConfig.cost_param)
}

// double top_speed = 3;
inline void PolySpeedPlanConfig::clear_top_speed() {
  top_speed_ = 0;
}
inline double PolySpeedPlanConfig::top_speed() const {
  // @@protoc_insertion_point(field_get:planning.PolySpeedPlanConfig.top_speed)
  return top_speed_;
}
inline void PolySpeedPlanConfig::set_top_speed(double value) {
  
  top_speed_ = value;
  // @@protoc_insertion_point(field_set:planning.PolySpeedPlanConfig.top_speed)
}

// double max_acceleration = 4;
inline void PolySpeedPlanConfig::clear_max_acceleration() {
  max_acceleration_ = 0;
}
inline double PolySpeedPlanConfig::max_acceleration() const {
  // @@protoc_insertion_point(field_get:planning.PolySpeedPlanConfig.max_acceleration)
  return max_acceleration_;
}
inline void PolySpeedPlanConfig::set_max_acceleration(double value) {
  
  max_acceleration_ = value;
  // @@protoc_insertion_point(field_set:planning.PolySpeedPlanConfig.max_acceleration)
}

// double max_deceleration = 5;
inline void PolySpeedPlanConfig::clear_max_deceleration() {
  max_deceleration_ = 0;
}
inline double PolySpeedPlanConfig::max_deceleration() const {
  // @@protoc_insertion_point(field_get:planning.PolySpeedPlanConfig.max_deceleration)
  return max_deceleration_;
}
inline void PolySpeedPlanConfig::set_max_deceleration(double value) {
  
  max_deceleration_ = value;
  // @@protoc_insertion_point(field_set:planning.PolySpeedPlanConfig.max_deceleration)
}

// double keep_clear_low_speed_penalty = 6;
inline void PolySpeedPlanConfig::clear_keep_clear_low_speed_penalty() {
  keep_clear_low_speed_penalty_ = 0;
}
inline double PolySpeedPlanConfig::keep_clear_low_speed_penalty() const {
  // @@protoc_insertion_point(field_get:planning.PolySpeedPlanConfig.keep_clear_low_speed_penalty)
  return keep_clear_low_speed_penalty_;
}
inline void PolySpeedPlanConfig::set_keep_clear_low_speed_penalty(double value) {
  
  keep_clear_low_speed_penalty_ = value;
  // @@protoc_insertion_point(field_set:planning.PolySpeedPlanConfig.keep_clear_low_speed_penalty)
}

// double default_speed_cost = 7;
inline void PolySpeedPlanConfig::clear_default_speed_cost() {
  default_speed_cost_ = 0;
}
inline double PolySpeedPlanConfig::default_speed_cost() const {
  // @@protoc_insertion_point(field_get:planning.PolySpeedPlanConfig.default_speed_cost)
  return default_speed_cost_;
}
inline void PolySpeedPlanConfig::set_default_speed_cost(double value) {
  
  default_speed_cost_ = value;
  // @@protoc_insertion_point(field_set:planning.PolySpeedPlanConfig.default_speed_cost)
}

// double exceed_speed_penalty = 8;
inline void PolySpeedPlanConfig::clear_exceed_speed_penalty() {
  exceed_speed_penalty_ = 0;
}
inline double PolySpeedPlanConfig::exceed_speed_penalty() const {
  // @@protoc_insertion_point(field_get:planning.PolySpeedPlanConfig.exceed_speed_penalty)
  return exceed_speed_penalty_;
}
inline void PolySpeedPlanConfig::set_exceed_speed_penalty(double value) {
  
  exceed_speed_penalty_ = value;
  // @@protoc_insertion_point(field_set:planning.PolySpeedPlanConfig.exceed_speed_penalty)
}

// double low_speed_penalty = 9;
inline void PolySpeedPlanConfig::clear_low_speed_penalty() {
  low_speed_penalty_ = 0;
}
inline double PolySpeedPlanConfig::low_speed_penalty() const {
  // @@protoc_insertion_point(field_get:planning.PolySpeedPlanConfig.low_speed_penalty)
  return low_speed_penalty_;
}
inline void PolySpeedPlanConfig::set_low_speed_penalty(double value) {
  
  low_speed_penalty_ = value;
  // @@protoc_insertion_point(field_set:planning.PolySpeedPlanConfig.low_speed_penalty)
}

// double accel_penalty = 10;
inline void PolySpeedPlanConfig::clear_accel_penalty() {
  accel_penalty_ = 0;
}
inline double PolySpeedPlanConfig::accel_penalty() const {
  // @@protoc_insertion_point(field_get:planning.PolySpeedPlanConfig.accel_penalty)
  return accel_penalty_;
}
inline void PolySpeedPlanConfig::set_accel_penalty(double value) {
  
  accel_penalty_ = value;
  // @@protoc_insertion_point(field_set:planning.PolySpeedPlanConfig.accel_penalty)
}

// double decel_penalty = 11;
inline void PolySpeedPlanConfig::clear_decel_penalty() {
  decel_penalty_ = 0;
}
inline double PolySpeedPlanConfig::decel_penalty() const {
  // @@protoc_insertion_point(field_get:planning.PolySpeedPlanConfig.decel_penalty)
  return decel_penalty_;
}
inline void PolySpeedPlanConfig::set_decel_penalty(double value) {
  
  decel_penalty_ = value;
  // @@protoc_insertion_point(field_set:planning.PolySpeedPlanConfig.decel_penalty)
}

// double positive_jerk_coeff = 12;
inline void PolySpeedPlanConfig::clear_positive_jerk_coeff() {
  positive_jerk_coeff_ = 0;
}
inline double PolySpeedPlanConfig::positive_jerk_coeff() const {
  // @@protoc_insertion_point(field_get:planning.PolySpeedPlanConfig.positive_jerk_coeff)
  return positive_jerk_coeff_;
}
inline void PolySpeedPlanConfig::set_positive_jerk_coeff(double value) {
  
  positive_jerk_coeff_ = value;
  // @@protoc_insertion_point(field_set:planning.PolySpeedPlanConfig.positive_jerk_coeff)
}

// double negative_jerk_coeff = 13;
inline void PolySpeedPlanConfig::clear_negative_jerk_coeff() {
  negative_jerk_coeff_ = 0;
}
inline double PolySpeedPlanConfig::negative_jerk_coeff() const {
  // @@protoc_insertion_point(field_get:planning.PolySpeedPlanConfig.negative_jerk_coeff)
  return negative_jerk_coeff_;
}
inline void PolySpeedPlanConfig::set_negative_jerk_coeff(double value) {
  
  negative_jerk_coeff_ = value;
  // @@protoc_insertion_point(field_set:planning.PolySpeedPlanConfig.negative_jerk_coeff)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace planning

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_planning_2fproto_2fpoly_5fspeed_5fplan_5fconfig_2eproto
