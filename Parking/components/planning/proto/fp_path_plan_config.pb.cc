// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planning/proto/fp_path_plan_config.proto

#include "planning/proto/fp_path_plan_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_planning_2fproto_2ffp_5fpath_5fplan_5fconfig_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_planning_2fproto_2ffp_5fpath_5fplan_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ParallelCostParam;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_planning_2fproto_2ffp_5fpath_5fplan_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ParallelSampleConfig;
}  // namespace protobuf_planning_2fproto_2ffp_5fpath_5fplan_5fconfig_2eproto
namespace planning {
class ParallelSampleConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ParallelSampleConfig>
      _instance;
} _ParallelSampleConfig_default_instance_;
class ParallelCostParamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ParallelCostParam>
      _instance;
} _ParallelCostParam_default_instance_;
class FpPathPlanConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FpPathPlanConfig>
      _instance;
} _FpPathPlanConfig_default_instance_;
}  // namespace planning
namespace protobuf_planning_2fproto_2ffp_5fpath_5fplan_5fconfig_2eproto {
static void InitDefaultsParallelSampleConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::planning::_ParallelSampleConfig_default_instance_;
    new (ptr) ::planning::ParallelSampleConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planning::ParallelSampleConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ParallelSampleConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsParallelSampleConfig}, {}};

static void InitDefaultsParallelCostParam() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::planning::_ParallelCostParam_default_instance_;
    new (ptr) ::planning::ParallelCostParam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planning::ParallelCostParam::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ParallelCostParam =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsParallelCostParam}, {}};

static void InitDefaultsFpPathPlanConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::planning::_FpPathPlanConfig_default_instance_;
    new (ptr) ::planning::FpPathPlanConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planning::FpPathPlanConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_FpPathPlanConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsFpPathPlanConfig}, {
      &protobuf_planning_2fproto_2ffp_5fpath_5fplan_5fconfig_2eproto::scc_info_ParallelSampleConfig.base,
      &protobuf_planning_2fproto_2ffp_5fpath_5fplan_5fconfig_2eproto::scc_info_ParallelCostParam.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ParallelSampleConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ParallelCostParam.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FpPathPlanConfig.base);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::ParallelSampleConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::ParallelSampleConfig, sample_line_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::ParallelSampleConfig, max_sample_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::ParallelSampleConfig, sample_interval_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::ParallelCostParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::ParallelCostParam, center_cost_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::ParallelCostParam, lateral_cost_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::ParallelCostParam, lateral_collision_cost_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::ParallelCostParam, longitudinal_collision_cost_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::ParallelCostParam, smooth_cost_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::ParallelCostParam, safety_cost_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::ParallelCostParam, lateral_collision_buffer_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::FpPathPlanConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::FpPathPlanConfig, sample_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::FpPathPlanConfig, cost_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::FpPathPlanConfig, preview_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::FpPathPlanConfig, only_use_stanley_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::FpPathPlanConfig, enable_steer_rate_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::FpPathPlanConfig, elegant_distance_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::planning::ParallelSampleConfig)},
  { 8, -1, sizeof(::planning::ParallelCostParam)},
  { 20, -1, sizeof(::planning::FpPathPlanConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::planning::_ParallelSampleConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::planning::_ParallelCostParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::planning::_FpPathPlanConfig_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "planning/proto/fp_path_plan_config.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n(planning/proto/fp_path_plan_config.pro"
      "to\022\010planning\"f\n\024ParallelSampleConfig\022\032\n\022"
      "sample_line_number\030\001 \001(\005\022\031\n\021max_sample_l"
      "ength\030\002 \001(\001\022\027\n\017sample_interval\030\003 \001(\001\"\371\001\n"
      "\021ParallelCostParam\022\032\n\022center_cost_weight"
      "\030\001 \001(\001\022\033\n\023lateral_cost_weight\030\002 \001(\001\022%\n\035l"
      "ateral_collision_cost_weight\030\003 \001(\001\022*\n\"lo"
      "ngitudinal_collision_cost_weight\030\004 \001(\001\022\032"
      "\n\022smooth_cost_weight\030\005 \001(\001\022\032\n\022safety_cos"
      "t_weight\030\006 \001(\001\022 \n\030lateral_collision_buff"
      "er\030\007 \001(\001\"\351\001\n\020FpPathPlanConfig\0225\n\rsample_"
      "config\030\001 \001(\0132\036.planning.ParallelSampleCo"
      "nfig\022/\n\ncost_param\030\002 \001(\0132\033.planning.Para"
      "llelCostParam\022\030\n\020preview_distance\030\003 \001(\001\022"
      "\030\n\020only_use_stanley\030\004 \001(\010\022\037\n\027enable_stee"
      "r_rate_limit\030\005 \001(\010\022\030\n\020elegant_distance\030\006"
      " \001(\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 652);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "planning/proto/fp_path_plan_config.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_planning_2fproto_2ffp_5fpath_5fplan_5fconfig_2eproto
namespace planning {

// ===================================================================

void ParallelSampleConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ParallelSampleConfig::kSampleLineNumberFieldNumber;
const int ParallelSampleConfig::kMaxSampleLengthFieldNumber;
const int ParallelSampleConfig::kSampleIntervalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ParallelSampleConfig::ParallelSampleConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_planning_2fproto_2ffp_5fpath_5fplan_5fconfig_2eproto::scc_info_ParallelSampleConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning.ParallelSampleConfig)
}
ParallelSampleConfig::ParallelSampleConfig(const ParallelSampleConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_sample_length_, &from.max_sample_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&sample_line_number_) -
    reinterpret_cast<char*>(&max_sample_length_)) + sizeof(sample_line_number_));
  // @@protoc_insertion_point(copy_constructor:planning.ParallelSampleConfig)
}

void ParallelSampleConfig::SharedCtor() {
  ::memset(&max_sample_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sample_line_number_) -
      reinterpret_cast<char*>(&max_sample_length_)) + sizeof(sample_line_number_));
}

ParallelSampleConfig::~ParallelSampleConfig() {
  // @@protoc_insertion_point(destructor:planning.ParallelSampleConfig)
  SharedDtor();
}

void ParallelSampleConfig::SharedDtor() {
}

void ParallelSampleConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ParallelSampleConfig::descriptor() {
  ::protobuf_planning_2fproto_2ffp_5fpath_5fplan_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_2fproto_2ffp_5fpath_5fplan_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ParallelSampleConfig& ParallelSampleConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_planning_2fproto_2ffp_5fpath_5fplan_5fconfig_2eproto::scc_info_ParallelSampleConfig.base);
  return *internal_default_instance();
}


void ParallelSampleConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:planning.ParallelSampleConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&max_sample_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sample_line_number_) -
      reinterpret_cast<char*>(&max_sample_length_)) + sizeof(sample_line_number_));
  _internal_metadata_.Clear();
}

bool ParallelSampleConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planning.ParallelSampleConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 sample_line_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sample_line_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double max_sample_length = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_sample_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double sample_interval = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sample_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planning.ParallelSampleConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planning.ParallelSampleConfig)
  return false;
#undef DO_
}

void ParallelSampleConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planning.ParallelSampleConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sample_line_number = 1;
  if (this->sample_line_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sample_line_number(), output);
  }

  // double max_sample_length = 2;
  if (this->max_sample_length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->max_sample_length(), output);
  }

  // double sample_interval = 3;
  if (this->sample_interval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->sample_interval(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:planning.ParallelSampleConfig)
}

::google::protobuf::uint8* ParallelSampleConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:planning.ParallelSampleConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sample_line_number = 1;
  if (this->sample_line_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sample_line_number(), target);
  }

  // double max_sample_length = 2;
  if (this->max_sample_length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->max_sample_length(), target);
  }

  // double sample_interval = 3;
  if (this->sample_interval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->sample_interval(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning.ParallelSampleConfig)
  return target;
}

size_t ParallelSampleConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning.ParallelSampleConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double max_sample_length = 2;
  if (this->max_sample_length() != 0) {
    total_size += 1 + 8;
  }

  // double sample_interval = 3;
  if (this->sample_interval() != 0) {
    total_size += 1 + 8;
  }

  // int32 sample_line_number = 1;
  if (this->sample_line_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sample_line_number());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParallelSampleConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning.ParallelSampleConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ParallelSampleConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ParallelSampleConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning.ParallelSampleConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning.ParallelSampleConfig)
    MergeFrom(*source);
  }
}

void ParallelSampleConfig::MergeFrom(const ParallelSampleConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning.ParallelSampleConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.max_sample_length() != 0) {
    set_max_sample_length(from.max_sample_length());
  }
  if (from.sample_interval() != 0) {
    set_sample_interval(from.sample_interval());
  }
  if (from.sample_line_number() != 0) {
    set_sample_line_number(from.sample_line_number());
  }
}

void ParallelSampleConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning.ParallelSampleConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParallelSampleConfig::CopyFrom(const ParallelSampleConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning.ParallelSampleConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParallelSampleConfig::IsInitialized() const {
  return true;
}

void ParallelSampleConfig::Swap(ParallelSampleConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ParallelSampleConfig::InternalSwap(ParallelSampleConfig* other) {
  using std::swap;
  swap(max_sample_length_, other->max_sample_length_);
  swap(sample_interval_, other->sample_interval_);
  swap(sample_line_number_, other->sample_line_number_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ParallelSampleConfig::GetMetadata() const {
  protobuf_planning_2fproto_2ffp_5fpath_5fplan_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_2fproto_2ffp_5fpath_5fplan_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ParallelCostParam::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ParallelCostParam::kCenterCostWeightFieldNumber;
const int ParallelCostParam::kLateralCostWeightFieldNumber;
const int ParallelCostParam::kLateralCollisionCostWeightFieldNumber;
const int ParallelCostParam::kLongitudinalCollisionCostWeightFieldNumber;
const int ParallelCostParam::kSmoothCostWeightFieldNumber;
const int ParallelCostParam::kSafetyCostWeightFieldNumber;
const int ParallelCostParam::kLateralCollisionBufferFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ParallelCostParam::ParallelCostParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_planning_2fproto_2ffp_5fpath_5fplan_5fconfig_2eproto::scc_info_ParallelCostParam.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning.ParallelCostParam)
}
ParallelCostParam::ParallelCostParam(const ParallelCostParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&center_cost_weight_, &from.center_cost_weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&lateral_collision_buffer_) -
    reinterpret_cast<char*>(&center_cost_weight_)) + sizeof(lateral_collision_buffer_));
  // @@protoc_insertion_point(copy_constructor:planning.ParallelCostParam)
}

void ParallelCostParam::SharedCtor() {
  ::memset(&center_cost_weight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lateral_collision_buffer_) -
      reinterpret_cast<char*>(&center_cost_weight_)) + sizeof(lateral_collision_buffer_));
}

ParallelCostParam::~ParallelCostParam() {
  // @@protoc_insertion_point(destructor:planning.ParallelCostParam)
  SharedDtor();
}

void ParallelCostParam::SharedDtor() {
}

void ParallelCostParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ParallelCostParam::descriptor() {
  ::protobuf_planning_2fproto_2ffp_5fpath_5fplan_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_2fproto_2ffp_5fpath_5fplan_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ParallelCostParam& ParallelCostParam::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_planning_2fproto_2ffp_5fpath_5fplan_5fconfig_2eproto::scc_info_ParallelCostParam.base);
  return *internal_default_instance();
}


void ParallelCostParam::Clear() {
// @@protoc_insertion_point(message_clear_start:planning.ParallelCostParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&center_cost_weight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lateral_collision_buffer_) -
      reinterpret_cast<char*>(&center_cost_weight_)) + sizeof(lateral_collision_buffer_));
  _internal_metadata_.Clear();
}

bool ParallelCostParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planning.ParallelCostParam)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double center_cost_weight = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &center_cost_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lateral_cost_weight = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lateral_cost_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lateral_collision_cost_weight = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lateral_collision_cost_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double longitudinal_collision_cost_weight = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitudinal_collision_cost_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double smooth_cost_weight = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &smooth_cost_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double safety_cost_weight = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &safety_cost_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lateral_collision_buffer = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lateral_collision_buffer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planning.ParallelCostParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planning.ParallelCostParam)
  return false;
#undef DO_
}

void ParallelCostParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planning.ParallelCostParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double center_cost_weight = 1;
  if (this->center_cost_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->center_cost_weight(), output);
  }

  // double lateral_cost_weight = 2;
  if (this->lateral_cost_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lateral_cost_weight(), output);
  }

  // double lateral_collision_cost_weight = 3;
  if (this->lateral_collision_cost_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->lateral_collision_cost_weight(), output);
  }

  // double longitudinal_collision_cost_weight = 4;
  if (this->longitudinal_collision_cost_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->longitudinal_collision_cost_weight(), output);
  }

  // double smooth_cost_weight = 5;
  if (this->smooth_cost_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->smooth_cost_weight(), output);
  }

  // double safety_cost_weight = 6;
  if (this->safety_cost_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->safety_cost_weight(), output);
  }

  // double lateral_collision_buffer = 7;
  if (this->lateral_collision_buffer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->lateral_collision_buffer(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:planning.ParallelCostParam)
}

::google::protobuf::uint8* ParallelCostParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:planning.ParallelCostParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double center_cost_weight = 1;
  if (this->center_cost_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->center_cost_weight(), target);
  }

  // double lateral_cost_weight = 2;
  if (this->lateral_cost_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->lateral_cost_weight(), target);
  }

  // double lateral_collision_cost_weight = 3;
  if (this->lateral_collision_cost_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->lateral_collision_cost_weight(), target);
  }

  // double longitudinal_collision_cost_weight = 4;
  if (this->longitudinal_collision_cost_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->longitudinal_collision_cost_weight(), target);
  }

  // double smooth_cost_weight = 5;
  if (this->smooth_cost_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->smooth_cost_weight(), target);
  }

  // double safety_cost_weight = 6;
  if (this->safety_cost_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->safety_cost_weight(), target);
  }

  // double lateral_collision_buffer = 7;
  if (this->lateral_collision_buffer() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->lateral_collision_buffer(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning.ParallelCostParam)
  return target;
}

size_t ParallelCostParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning.ParallelCostParam)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double center_cost_weight = 1;
  if (this->center_cost_weight() != 0) {
    total_size += 1 + 8;
  }

  // double lateral_cost_weight = 2;
  if (this->lateral_cost_weight() != 0) {
    total_size += 1 + 8;
  }

  // double lateral_collision_cost_weight = 3;
  if (this->lateral_collision_cost_weight() != 0) {
    total_size += 1 + 8;
  }

  // double longitudinal_collision_cost_weight = 4;
  if (this->longitudinal_collision_cost_weight() != 0) {
    total_size += 1 + 8;
  }

  // double smooth_cost_weight = 5;
  if (this->smooth_cost_weight() != 0) {
    total_size += 1 + 8;
  }

  // double safety_cost_weight = 6;
  if (this->safety_cost_weight() != 0) {
    total_size += 1 + 8;
  }

  // double lateral_collision_buffer = 7;
  if (this->lateral_collision_buffer() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParallelCostParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning.ParallelCostParam)
  GOOGLE_DCHECK_NE(&from, this);
  const ParallelCostParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ParallelCostParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning.ParallelCostParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning.ParallelCostParam)
    MergeFrom(*source);
  }
}

void ParallelCostParam::MergeFrom(const ParallelCostParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning.ParallelCostParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.center_cost_weight() != 0) {
    set_center_cost_weight(from.center_cost_weight());
  }
  if (from.lateral_cost_weight() != 0) {
    set_lateral_cost_weight(from.lateral_cost_weight());
  }
  if (from.lateral_collision_cost_weight() != 0) {
    set_lateral_collision_cost_weight(from.lateral_collision_cost_weight());
  }
  if (from.longitudinal_collision_cost_weight() != 0) {
    set_longitudinal_collision_cost_weight(from.longitudinal_collision_cost_weight());
  }
  if (from.smooth_cost_weight() != 0) {
    set_smooth_cost_weight(from.smooth_cost_weight());
  }
  if (from.safety_cost_weight() != 0) {
    set_safety_cost_weight(from.safety_cost_weight());
  }
  if (from.lateral_collision_buffer() != 0) {
    set_lateral_collision_buffer(from.lateral_collision_buffer());
  }
}

void ParallelCostParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning.ParallelCostParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParallelCostParam::CopyFrom(const ParallelCostParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning.ParallelCostParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParallelCostParam::IsInitialized() const {
  return true;
}

void ParallelCostParam::Swap(ParallelCostParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ParallelCostParam::InternalSwap(ParallelCostParam* other) {
  using std::swap;
  swap(center_cost_weight_, other->center_cost_weight_);
  swap(lateral_cost_weight_, other->lateral_cost_weight_);
  swap(lateral_collision_cost_weight_, other->lateral_collision_cost_weight_);
  swap(longitudinal_collision_cost_weight_, other->longitudinal_collision_cost_weight_);
  swap(smooth_cost_weight_, other->smooth_cost_weight_);
  swap(safety_cost_weight_, other->safety_cost_weight_);
  swap(lateral_collision_buffer_, other->lateral_collision_buffer_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ParallelCostParam::GetMetadata() const {
  protobuf_planning_2fproto_2ffp_5fpath_5fplan_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_2fproto_2ffp_5fpath_5fplan_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FpPathPlanConfig::InitAsDefaultInstance() {
  ::planning::_FpPathPlanConfig_default_instance_._instance.get_mutable()->sample_config_ = const_cast< ::planning::ParallelSampleConfig*>(
      ::planning::ParallelSampleConfig::internal_default_instance());
  ::planning::_FpPathPlanConfig_default_instance_._instance.get_mutable()->cost_param_ = const_cast< ::planning::ParallelCostParam*>(
      ::planning::ParallelCostParam::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FpPathPlanConfig::kSampleConfigFieldNumber;
const int FpPathPlanConfig::kCostParamFieldNumber;
const int FpPathPlanConfig::kPreviewDistanceFieldNumber;
const int FpPathPlanConfig::kOnlyUseStanleyFieldNumber;
const int FpPathPlanConfig::kEnableSteerRateLimitFieldNumber;
const int FpPathPlanConfig::kElegantDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FpPathPlanConfig::FpPathPlanConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_planning_2fproto_2ffp_5fpath_5fplan_5fconfig_2eproto::scc_info_FpPathPlanConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning.FpPathPlanConfig)
}
FpPathPlanConfig::FpPathPlanConfig(const FpPathPlanConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sample_config()) {
    sample_config_ = new ::planning::ParallelSampleConfig(*from.sample_config_);
  } else {
    sample_config_ = NULL;
  }
  if (from.has_cost_param()) {
    cost_param_ = new ::planning::ParallelCostParam(*from.cost_param_);
  } else {
    cost_param_ = NULL;
  }
  ::memcpy(&preview_distance_, &from.preview_distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_steer_rate_limit_) -
    reinterpret_cast<char*>(&preview_distance_)) + sizeof(enable_steer_rate_limit_));
  // @@protoc_insertion_point(copy_constructor:planning.FpPathPlanConfig)
}

void FpPathPlanConfig::SharedCtor() {
  ::memset(&sample_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_steer_rate_limit_) -
      reinterpret_cast<char*>(&sample_config_)) + sizeof(enable_steer_rate_limit_));
}

FpPathPlanConfig::~FpPathPlanConfig() {
  // @@protoc_insertion_point(destructor:planning.FpPathPlanConfig)
  SharedDtor();
}

void FpPathPlanConfig::SharedDtor() {
  if (this != internal_default_instance()) delete sample_config_;
  if (this != internal_default_instance()) delete cost_param_;
}

void FpPathPlanConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FpPathPlanConfig::descriptor() {
  ::protobuf_planning_2fproto_2ffp_5fpath_5fplan_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_2fproto_2ffp_5fpath_5fplan_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FpPathPlanConfig& FpPathPlanConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_planning_2fproto_2ffp_5fpath_5fplan_5fconfig_2eproto::scc_info_FpPathPlanConfig.base);
  return *internal_default_instance();
}


void FpPathPlanConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:planning.FpPathPlanConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && sample_config_ != NULL) {
    delete sample_config_;
  }
  sample_config_ = NULL;
  if (GetArenaNoVirtual() == NULL && cost_param_ != NULL) {
    delete cost_param_;
  }
  cost_param_ = NULL;
  ::memset(&preview_distance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_steer_rate_limit_) -
      reinterpret_cast<char*>(&preview_distance_)) + sizeof(enable_steer_rate_limit_));
  _internal_metadata_.Clear();
}

bool FpPathPlanConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planning.FpPathPlanConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .planning.ParallelSampleConfig sample_config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sample_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .planning.ParallelCostParam cost_param = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cost_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double preview_distance = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &preview_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool only_use_stanley = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &only_use_stanley_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable_steer_rate_limit = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_steer_rate_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double elegant_distance = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &elegant_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planning.FpPathPlanConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planning.FpPathPlanConfig)
  return false;
#undef DO_
}

void FpPathPlanConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planning.FpPathPlanConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .planning.ParallelSampleConfig sample_config = 1;
  if (this->has_sample_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_sample_config(), output);
  }

  // .planning.ParallelCostParam cost_param = 2;
  if (this->has_cost_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_cost_param(), output);
  }

  // double preview_distance = 3;
  if (this->preview_distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->preview_distance(), output);
  }

  // bool only_use_stanley = 4;
  if (this->only_use_stanley() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->only_use_stanley(), output);
  }

  // bool enable_steer_rate_limit = 5;
  if (this->enable_steer_rate_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->enable_steer_rate_limit(), output);
  }

  // double elegant_distance = 6;
  if (this->elegant_distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->elegant_distance(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:planning.FpPathPlanConfig)
}

::google::protobuf::uint8* FpPathPlanConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:planning.FpPathPlanConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .planning.ParallelSampleConfig sample_config = 1;
  if (this->has_sample_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_sample_config(), deterministic, target);
  }

  // .planning.ParallelCostParam cost_param = 2;
  if (this->has_cost_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_cost_param(), deterministic, target);
  }

  // double preview_distance = 3;
  if (this->preview_distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->preview_distance(), target);
  }

  // bool only_use_stanley = 4;
  if (this->only_use_stanley() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->only_use_stanley(), target);
  }

  // bool enable_steer_rate_limit = 5;
  if (this->enable_steer_rate_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->enable_steer_rate_limit(), target);
  }

  // double elegant_distance = 6;
  if (this->elegant_distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->elegant_distance(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning.FpPathPlanConfig)
  return target;
}

size_t FpPathPlanConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning.FpPathPlanConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .planning.ParallelSampleConfig sample_config = 1;
  if (this->has_sample_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sample_config_);
  }

  // .planning.ParallelCostParam cost_param = 2;
  if (this->has_cost_param()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *cost_param_);
  }

  // double preview_distance = 3;
  if (this->preview_distance() != 0) {
    total_size += 1 + 8;
  }

  // double elegant_distance = 6;
  if (this->elegant_distance() != 0) {
    total_size += 1 + 8;
  }

  // bool only_use_stanley = 4;
  if (this->only_use_stanley() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_steer_rate_limit = 5;
  if (this->enable_steer_rate_limit() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FpPathPlanConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning.FpPathPlanConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const FpPathPlanConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FpPathPlanConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning.FpPathPlanConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning.FpPathPlanConfig)
    MergeFrom(*source);
  }
}

void FpPathPlanConfig::MergeFrom(const FpPathPlanConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning.FpPathPlanConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sample_config()) {
    mutable_sample_config()->::planning::ParallelSampleConfig::MergeFrom(from.sample_config());
  }
  if (from.has_cost_param()) {
    mutable_cost_param()->::planning::ParallelCostParam::MergeFrom(from.cost_param());
  }
  if (from.preview_distance() != 0) {
    set_preview_distance(from.preview_distance());
  }
  if (from.elegant_distance() != 0) {
    set_elegant_distance(from.elegant_distance());
  }
  if (from.only_use_stanley() != 0) {
    set_only_use_stanley(from.only_use_stanley());
  }
  if (from.enable_steer_rate_limit() != 0) {
    set_enable_steer_rate_limit(from.enable_steer_rate_limit());
  }
}

void FpPathPlanConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning.FpPathPlanConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FpPathPlanConfig::CopyFrom(const FpPathPlanConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning.FpPathPlanConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FpPathPlanConfig::IsInitialized() const {
  return true;
}

void FpPathPlanConfig::Swap(FpPathPlanConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FpPathPlanConfig::InternalSwap(FpPathPlanConfig* other) {
  using std::swap;
  swap(sample_config_, other->sample_config_);
  swap(cost_param_, other->cost_param_);
  swap(preview_distance_, other->preview_distance_);
  swap(elegant_distance_, other->elegant_distance_);
  swap(only_use_stanley_, other->only_use_stanley_);
  swap(enable_steer_rate_limit_, other->enable_steer_rate_limit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FpPathPlanConfig::GetMetadata() const {
  protobuf_planning_2fproto_2ffp_5fpath_5fplan_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_2fproto_2ffp_5fpath_5fplan_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::planning::ParallelSampleConfig* Arena::CreateMaybeMessage< ::planning::ParallelSampleConfig >(Arena* arena) {
  return Arena::CreateInternal< ::planning::ParallelSampleConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::planning::ParallelCostParam* Arena::CreateMaybeMessage< ::planning::ParallelCostParam >(Arena* arena) {
  return Arena::CreateInternal< ::planning::ParallelCostParam >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::planning::FpPathPlanConfig* Arena::CreateMaybeMessage< ::planning::FpPathPlanConfig >(Arena* arena) {
  return Arena::CreateInternal< ::planning::FpPathPlanConfig >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
