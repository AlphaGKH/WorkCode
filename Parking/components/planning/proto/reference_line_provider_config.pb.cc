// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planning/proto/reference_line_provider_config.proto

#include "planning/proto/reference_line_provider_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_planning_2fproto_2freference_5fline_5fprovider_5fconfig_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_planning_2fproto_2freference_5fline_5fprovider_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_QpSplineSmootherConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_planning_2fproto_2freference_5fline_5fprovider_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ReferenceLineSmootherConfig;
}  // namespace protobuf_planning_2fproto_2freference_5fline_5fprovider_5fconfig_2eproto
namespace planning {
class QpSplineSmootherConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<QpSplineSmootherConfig>
      _instance;
} _QpSplineSmootherConfig_default_instance_;
class ReferenceLineSmootherConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReferenceLineSmootherConfig>
      _instance;
  const ::planning::QpSplineSmootherConfig* qp_spline_;
} _ReferenceLineSmootherConfig_default_instance_;
class ReferenceLineProviderConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReferenceLineProviderConfig>
      _instance;
} _ReferenceLineProviderConfig_default_instance_;
}  // namespace planning
namespace protobuf_planning_2fproto_2freference_5fline_5fprovider_5fconfig_2eproto {
static void InitDefaultsQpSplineSmootherConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::planning::_QpSplineSmootherConfig_default_instance_;
    new (ptr) ::planning::QpSplineSmootherConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planning::QpSplineSmootherConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_QpSplineSmootherConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsQpSplineSmootherConfig}, {}};

static void InitDefaultsReferenceLineSmootherConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::planning::_ReferenceLineSmootherConfig_default_instance_;
    new (ptr) ::planning::ReferenceLineSmootherConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planning::ReferenceLineSmootherConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ReferenceLineSmootherConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReferenceLineSmootherConfig}, {
      &protobuf_planning_2fproto_2freference_5fline_5fprovider_5fconfig_2eproto::scc_info_QpSplineSmootherConfig.base,}};

static void InitDefaultsReferenceLineProviderConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::planning::_ReferenceLineProviderConfig_default_instance_;
    new (ptr) ::planning::ReferenceLineProviderConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planning::ReferenceLineProviderConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ReferenceLineProviderConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReferenceLineProviderConfig}, {
      &protobuf_planning_2fproto_2freference_5fline_5fprovider_5fconfig_2eproto::scc_info_ReferenceLineSmootherConfig.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_QpSplineSmootherConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReferenceLineSmootherConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReferenceLineProviderConfig.base);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::QpSplineSmootherConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::QpSplineSmootherConfig, spline_order_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::QpSplineSmootherConfig, max_spline_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::QpSplineSmootherConfig, regularization_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::QpSplineSmootherConfig, second_derivative_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::QpSplineSmootherConfig, third_derivative_weight_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::ReferenceLineSmootherConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::ReferenceLineSmootherConfig, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::ReferenceLineSmootherConfig, max_constraint_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::ReferenceLineSmootherConfig, longitudinal_boundary_bound_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::ReferenceLineSmootherConfig, lateral_boundary_bound_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::ReferenceLineSmootherConfig, num_of_total_points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::ReferenceLineSmootherConfig, wide_lane_threshold_factor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::ReferenceLineSmootherConfig, wide_lane_shift_remain_factor_),
  offsetof(::planning::ReferenceLineSmootherConfigDefaultTypeInternal, qp_spline_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::ReferenceLineSmootherConfig, SmootherConfig_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::ReferenceLineProviderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::ReferenceLineProviderConfig, smooth_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::ReferenceLineProviderConfig, enable_reference_line_stitching_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::ReferenceLineProviderConfig, enable_smooth_reference_line_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::ReferenceLineProviderConfig, smoothed_reference_line_max_diff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::ReferenceLineProviderConfig, update_counter_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::planning::QpSplineSmootherConfig)},
  { 10, -1, sizeof(::planning::ReferenceLineSmootherConfig)},
  { 23, -1, sizeof(::planning::ReferenceLineProviderConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::planning::_QpSplineSmootherConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::planning::_ReferenceLineSmootherConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::planning::_ReferenceLineProviderConfig_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "planning/proto/reference_line_provider_config.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n3planning/proto/reference_line_provider"
      "_config.proto\022\010planning\"\253\001\n\026QpSplineSmoo"
      "therConfig\022\024\n\014spline_order\030\001 \001(\r\022\031\n\021max_"
      "spline_length\030\002 \001(\001\022\035\n\025regularization_we"
      "ight\030\003 \001(\001\022 \n\030second_derivative_weight\030\004"
      " \001(\001\022\037\n\027third_derivative_weight\030\005 \001(\001\"\264\002"
      "\n\033ReferenceLineSmootherConfig\022\037\n\027max_con"
      "straint_interval\030\001 \001(\001\022#\n\033longitudinal_b"
      "oundary_bound\030\002 \001(\001\022\036\n\026lateral_boundary_"
      "bound\030\003 \001(\001\022\033\n\023num_of_total_points\030\004 \001(\r"
      "\022\"\n\032wide_lane_threshold_factor\030\005 \001(\001\022%\n\035"
      "wide_lane_shift_remain_factor\030\006 \001(\001\0225\n\tq"
      "p_spline\030\007 \001(\0132 .planning.QpSplineSmooth"
      "erConfigH\000B\020\n\016SmootherConfig\"\354\001\n\033Referen"
      "ceLineProviderConfig\022<\n\rsmooth_config\030\001 "
      "\001(\0132%.planning.ReferenceLineSmootherConf"
      "ig\022\'\n\037enable_reference_line_stitching\030\002 "
      "\001(\010\022$\n\034enable_smooth_reference_line\030\003 \001("
      "\010\022(\n smoothed_reference_line_max_diff\030\004 "
      "\001(\001\022\026\n\016update_counter\030\005 \001(\rb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 795);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "planning/proto/reference_line_provider_config.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_planning_2fproto_2freference_5fline_5fprovider_5fconfig_2eproto
namespace planning {

// ===================================================================

void QpSplineSmootherConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QpSplineSmootherConfig::kSplineOrderFieldNumber;
const int QpSplineSmootherConfig::kMaxSplineLengthFieldNumber;
const int QpSplineSmootherConfig::kRegularizationWeightFieldNumber;
const int QpSplineSmootherConfig::kSecondDerivativeWeightFieldNumber;
const int QpSplineSmootherConfig::kThirdDerivativeWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QpSplineSmootherConfig::QpSplineSmootherConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_planning_2fproto_2freference_5fline_5fprovider_5fconfig_2eproto::scc_info_QpSplineSmootherConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning.QpSplineSmootherConfig)
}
QpSplineSmootherConfig::QpSplineSmootherConfig(const QpSplineSmootherConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_spline_length_, &from.max_spline_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&spline_order_) -
    reinterpret_cast<char*>(&max_spline_length_)) + sizeof(spline_order_));
  // @@protoc_insertion_point(copy_constructor:planning.QpSplineSmootherConfig)
}

void QpSplineSmootherConfig::SharedCtor() {
  ::memset(&max_spline_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&spline_order_) -
      reinterpret_cast<char*>(&max_spline_length_)) + sizeof(spline_order_));
}

QpSplineSmootherConfig::~QpSplineSmootherConfig() {
  // @@protoc_insertion_point(destructor:planning.QpSplineSmootherConfig)
  SharedDtor();
}

void QpSplineSmootherConfig::SharedDtor() {
}

void QpSplineSmootherConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* QpSplineSmootherConfig::descriptor() {
  ::protobuf_planning_2fproto_2freference_5fline_5fprovider_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_2fproto_2freference_5fline_5fprovider_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QpSplineSmootherConfig& QpSplineSmootherConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_planning_2fproto_2freference_5fline_5fprovider_5fconfig_2eproto::scc_info_QpSplineSmootherConfig.base);
  return *internal_default_instance();
}


void QpSplineSmootherConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:planning.QpSplineSmootherConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&max_spline_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&spline_order_) -
      reinterpret_cast<char*>(&max_spline_length_)) + sizeof(spline_order_));
  _internal_metadata_.Clear();
}

bool QpSplineSmootherConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planning.QpSplineSmootherConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 spline_order = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spline_order_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double max_spline_length = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_spline_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double regularization_weight = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &regularization_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double second_derivative_weight = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &second_derivative_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double third_derivative_weight = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &third_derivative_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planning.QpSplineSmootherConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planning.QpSplineSmootherConfig)
  return false;
#undef DO_
}

void QpSplineSmootherConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planning.QpSplineSmootherConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 spline_order = 1;
  if (this->spline_order() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->spline_order(), output);
  }

  // double max_spline_length = 2;
  if (this->max_spline_length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->max_spline_length(), output);
  }

  // double regularization_weight = 3;
  if (this->regularization_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->regularization_weight(), output);
  }

  // double second_derivative_weight = 4;
  if (this->second_derivative_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->second_derivative_weight(), output);
  }

  // double third_derivative_weight = 5;
  if (this->third_derivative_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->third_derivative_weight(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:planning.QpSplineSmootherConfig)
}

::google::protobuf::uint8* QpSplineSmootherConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:planning.QpSplineSmootherConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 spline_order = 1;
  if (this->spline_order() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->spline_order(), target);
  }

  // double max_spline_length = 2;
  if (this->max_spline_length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->max_spline_length(), target);
  }

  // double regularization_weight = 3;
  if (this->regularization_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->regularization_weight(), target);
  }

  // double second_derivative_weight = 4;
  if (this->second_derivative_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->second_derivative_weight(), target);
  }

  // double third_derivative_weight = 5;
  if (this->third_derivative_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->third_derivative_weight(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning.QpSplineSmootherConfig)
  return target;
}

size_t QpSplineSmootherConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning.QpSplineSmootherConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double max_spline_length = 2;
  if (this->max_spline_length() != 0) {
    total_size += 1 + 8;
  }

  // double regularization_weight = 3;
  if (this->regularization_weight() != 0) {
    total_size += 1 + 8;
  }

  // double second_derivative_weight = 4;
  if (this->second_derivative_weight() != 0) {
    total_size += 1 + 8;
  }

  // double third_derivative_weight = 5;
  if (this->third_derivative_weight() != 0) {
    total_size += 1 + 8;
  }

  // uint32 spline_order = 1;
  if (this->spline_order() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->spline_order());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QpSplineSmootherConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning.QpSplineSmootherConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const QpSplineSmootherConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QpSplineSmootherConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning.QpSplineSmootherConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning.QpSplineSmootherConfig)
    MergeFrom(*source);
  }
}

void QpSplineSmootherConfig::MergeFrom(const QpSplineSmootherConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning.QpSplineSmootherConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.max_spline_length() != 0) {
    set_max_spline_length(from.max_spline_length());
  }
  if (from.regularization_weight() != 0) {
    set_regularization_weight(from.regularization_weight());
  }
  if (from.second_derivative_weight() != 0) {
    set_second_derivative_weight(from.second_derivative_weight());
  }
  if (from.third_derivative_weight() != 0) {
    set_third_derivative_weight(from.third_derivative_weight());
  }
  if (from.spline_order() != 0) {
    set_spline_order(from.spline_order());
  }
}

void QpSplineSmootherConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning.QpSplineSmootherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QpSplineSmootherConfig::CopyFrom(const QpSplineSmootherConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning.QpSplineSmootherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QpSplineSmootherConfig::IsInitialized() const {
  return true;
}

void QpSplineSmootherConfig::Swap(QpSplineSmootherConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QpSplineSmootherConfig::InternalSwap(QpSplineSmootherConfig* other) {
  using std::swap;
  swap(max_spline_length_, other->max_spline_length_);
  swap(regularization_weight_, other->regularization_weight_);
  swap(second_derivative_weight_, other->second_derivative_weight_);
  swap(third_derivative_weight_, other->third_derivative_weight_);
  swap(spline_order_, other->spline_order_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata QpSplineSmootherConfig::GetMetadata() const {
  protobuf_planning_2fproto_2freference_5fline_5fprovider_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_2fproto_2freference_5fline_5fprovider_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReferenceLineSmootherConfig::InitAsDefaultInstance() {
  ::planning::_ReferenceLineSmootherConfig_default_instance_.qp_spline_ = const_cast< ::planning::QpSplineSmootherConfig*>(
      ::planning::QpSplineSmootherConfig::internal_default_instance());
}
void ReferenceLineSmootherConfig::set_allocated_qp_spline(::planning::QpSplineSmootherConfig* qp_spline) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_SmootherConfig();
  if (qp_spline) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      qp_spline = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, qp_spline, submessage_arena);
    }
    set_has_qp_spline();
    SmootherConfig_.qp_spline_ = qp_spline;
  }
  // @@protoc_insertion_point(field_set_allocated:planning.ReferenceLineSmootherConfig.qp_spline)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReferenceLineSmootherConfig::kMaxConstraintIntervalFieldNumber;
const int ReferenceLineSmootherConfig::kLongitudinalBoundaryBoundFieldNumber;
const int ReferenceLineSmootherConfig::kLateralBoundaryBoundFieldNumber;
const int ReferenceLineSmootherConfig::kNumOfTotalPointsFieldNumber;
const int ReferenceLineSmootherConfig::kWideLaneThresholdFactorFieldNumber;
const int ReferenceLineSmootherConfig::kWideLaneShiftRemainFactorFieldNumber;
const int ReferenceLineSmootherConfig::kQpSplineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReferenceLineSmootherConfig::ReferenceLineSmootherConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_planning_2fproto_2freference_5fline_5fprovider_5fconfig_2eproto::scc_info_ReferenceLineSmootherConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning.ReferenceLineSmootherConfig)
}
ReferenceLineSmootherConfig::ReferenceLineSmootherConfig(const ReferenceLineSmootherConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_constraint_interval_, &from.max_constraint_interval_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_of_total_points_) -
    reinterpret_cast<char*>(&max_constraint_interval_)) + sizeof(num_of_total_points_));
  clear_has_SmootherConfig();
  switch (from.SmootherConfig_case()) {
    case kQpSpline: {
      mutable_qp_spline()->::planning::QpSplineSmootherConfig::MergeFrom(from.qp_spline());
      break;
    }
    case SMOOTHERCONFIG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:planning.ReferenceLineSmootherConfig)
}

void ReferenceLineSmootherConfig::SharedCtor() {
  ::memset(&max_constraint_interval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_of_total_points_) -
      reinterpret_cast<char*>(&max_constraint_interval_)) + sizeof(num_of_total_points_));
  clear_has_SmootherConfig();
}

ReferenceLineSmootherConfig::~ReferenceLineSmootherConfig() {
  // @@protoc_insertion_point(destructor:planning.ReferenceLineSmootherConfig)
  SharedDtor();
}

void ReferenceLineSmootherConfig::SharedDtor() {
  if (has_SmootherConfig()) {
    clear_SmootherConfig();
  }
}

void ReferenceLineSmootherConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReferenceLineSmootherConfig::descriptor() {
  ::protobuf_planning_2fproto_2freference_5fline_5fprovider_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_2fproto_2freference_5fline_5fprovider_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReferenceLineSmootherConfig& ReferenceLineSmootherConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_planning_2fproto_2freference_5fline_5fprovider_5fconfig_2eproto::scc_info_ReferenceLineSmootherConfig.base);
  return *internal_default_instance();
}


void ReferenceLineSmootherConfig::clear_SmootherConfig() {
// @@protoc_insertion_point(one_of_clear_start:planning.ReferenceLineSmootherConfig)
  switch (SmootherConfig_case()) {
    case kQpSpline: {
      delete SmootherConfig_.qp_spline_;
      break;
    }
    case SMOOTHERCONFIG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SMOOTHERCONFIG_NOT_SET;
}


void ReferenceLineSmootherConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:planning.ReferenceLineSmootherConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&max_constraint_interval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_of_total_points_) -
      reinterpret_cast<char*>(&max_constraint_interval_)) + sizeof(num_of_total_points_));
  clear_SmootherConfig();
  _internal_metadata_.Clear();
}

bool ReferenceLineSmootherConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planning.ReferenceLineSmootherConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double max_constraint_interval = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_constraint_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double longitudinal_boundary_bound = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitudinal_boundary_bound_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lateral_boundary_bound = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lateral_boundary_bound_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 num_of_total_points = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_of_total_points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double wide_lane_threshold_factor = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wide_lane_threshold_factor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double wide_lane_shift_remain_factor = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wide_lane_shift_remain_factor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .planning.QpSplineSmootherConfig qp_spline = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_qp_spline()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planning.ReferenceLineSmootherConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planning.ReferenceLineSmootherConfig)
  return false;
#undef DO_
}

void ReferenceLineSmootherConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planning.ReferenceLineSmootherConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double max_constraint_interval = 1;
  if (this->max_constraint_interval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->max_constraint_interval(), output);
  }

  // double longitudinal_boundary_bound = 2;
  if (this->longitudinal_boundary_bound() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->longitudinal_boundary_bound(), output);
  }

  // double lateral_boundary_bound = 3;
  if (this->lateral_boundary_bound() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->lateral_boundary_bound(), output);
  }

  // uint32 num_of_total_points = 4;
  if (this->num_of_total_points() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->num_of_total_points(), output);
  }

  // double wide_lane_threshold_factor = 5;
  if (this->wide_lane_threshold_factor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->wide_lane_threshold_factor(), output);
  }

  // double wide_lane_shift_remain_factor = 6;
  if (this->wide_lane_shift_remain_factor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->wide_lane_shift_remain_factor(), output);
  }

  // .planning.QpSplineSmootherConfig qp_spline = 7;
  if (has_qp_spline()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_qp_spline(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:planning.ReferenceLineSmootherConfig)
}

::google::protobuf::uint8* ReferenceLineSmootherConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:planning.ReferenceLineSmootherConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double max_constraint_interval = 1;
  if (this->max_constraint_interval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->max_constraint_interval(), target);
  }

  // double longitudinal_boundary_bound = 2;
  if (this->longitudinal_boundary_bound() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->longitudinal_boundary_bound(), target);
  }

  // double lateral_boundary_bound = 3;
  if (this->lateral_boundary_bound() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->lateral_boundary_bound(), target);
  }

  // uint32 num_of_total_points = 4;
  if (this->num_of_total_points() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->num_of_total_points(), target);
  }

  // double wide_lane_threshold_factor = 5;
  if (this->wide_lane_threshold_factor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->wide_lane_threshold_factor(), target);
  }

  // double wide_lane_shift_remain_factor = 6;
  if (this->wide_lane_shift_remain_factor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->wide_lane_shift_remain_factor(), target);
  }

  // .planning.QpSplineSmootherConfig qp_spline = 7;
  if (has_qp_spline()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_qp_spline(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning.ReferenceLineSmootherConfig)
  return target;
}

size_t ReferenceLineSmootherConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning.ReferenceLineSmootherConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double max_constraint_interval = 1;
  if (this->max_constraint_interval() != 0) {
    total_size += 1 + 8;
  }

  // double longitudinal_boundary_bound = 2;
  if (this->longitudinal_boundary_bound() != 0) {
    total_size += 1 + 8;
  }

  // double lateral_boundary_bound = 3;
  if (this->lateral_boundary_bound() != 0) {
    total_size += 1 + 8;
  }

  // double wide_lane_threshold_factor = 5;
  if (this->wide_lane_threshold_factor() != 0) {
    total_size += 1 + 8;
  }

  // double wide_lane_shift_remain_factor = 6;
  if (this->wide_lane_shift_remain_factor() != 0) {
    total_size += 1 + 8;
  }

  // uint32 num_of_total_points = 4;
  if (this->num_of_total_points() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_of_total_points());
  }

  switch (SmootherConfig_case()) {
    // .planning.QpSplineSmootherConfig qp_spline = 7;
    case kQpSpline: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *SmootherConfig_.qp_spline_);
      break;
    }
    case SMOOTHERCONFIG_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReferenceLineSmootherConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning.ReferenceLineSmootherConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ReferenceLineSmootherConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReferenceLineSmootherConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning.ReferenceLineSmootherConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning.ReferenceLineSmootherConfig)
    MergeFrom(*source);
  }
}

void ReferenceLineSmootherConfig::MergeFrom(const ReferenceLineSmootherConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning.ReferenceLineSmootherConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.max_constraint_interval() != 0) {
    set_max_constraint_interval(from.max_constraint_interval());
  }
  if (from.longitudinal_boundary_bound() != 0) {
    set_longitudinal_boundary_bound(from.longitudinal_boundary_bound());
  }
  if (from.lateral_boundary_bound() != 0) {
    set_lateral_boundary_bound(from.lateral_boundary_bound());
  }
  if (from.wide_lane_threshold_factor() != 0) {
    set_wide_lane_threshold_factor(from.wide_lane_threshold_factor());
  }
  if (from.wide_lane_shift_remain_factor() != 0) {
    set_wide_lane_shift_remain_factor(from.wide_lane_shift_remain_factor());
  }
  if (from.num_of_total_points() != 0) {
    set_num_of_total_points(from.num_of_total_points());
  }
  switch (from.SmootherConfig_case()) {
    case kQpSpline: {
      mutable_qp_spline()->::planning::QpSplineSmootherConfig::MergeFrom(from.qp_spline());
      break;
    }
    case SMOOTHERCONFIG_NOT_SET: {
      break;
    }
  }
}

void ReferenceLineSmootherConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning.ReferenceLineSmootherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReferenceLineSmootherConfig::CopyFrom(const ReferenceLineSmootherConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning.ReferenceLineSmootherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceLineSmootherConfig::IsInitialized() const {
  return true;
}

void ReferenceLineSmootherConfig::Swap(ReferenceLineSmootherConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReferenceLineSmootherConfig::InternalSwap(ReferenceLineSmootherConfig* other) {
  using std::swap;
  swap(max_constraint_interval_, other->max_constraint_interval_);
  swap(longitudinal_boundary_bound_, other->longitudinal_boundary_bound_);
  swap(lateral_boundary_bound_, other->lateral_boundary_bound_);
  swap(wide_lane_threshold_factor_, other->wide_lane_threshold_factor_);
  swap(wide_lane_shift_remain_factor_, other->wide_lane_shift_remain_factor_);
  swap(num_of_total_points_, other->num_of_total_points_);
  swap(SmootherConfig_, other->SmootherConfig_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReferenceLineSmootherConfig::GetMetadata() const {
  protobuf_planning_2fproto_2freference_5fline_5fprovider_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_2fproto_2freference_5fline_5fprovider_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReferenceLineProviderConfig::InitAsDefaultInstance() {
  ::planning::_ReferenceLineProviderConfig_default_instance_._instance.get_mutable()->smooth_config_ = const_cast< ::planning::ReferenceLineSmootherConfig*>(
      ::planning::ReferenceLineSmootherConfig::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReferenceLineProviderConfig::kSmoothConfigFieldNumber;
const int ReferenceLineProviderConfig::kEnableReferenceLineStitchingFieldNumber;
const int ReferenceLineProviderConfig::kEnableSmoothReferenceLineFieldNumber;
const int ReferenceLineProviderConfig::kSmoothedReferenceLineMaxDiffFieldNumber;
const int ReferenceLineProviderConfig::kUpdateCounterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReferenceLineProviderConfig::ReferenceLineProviderConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_planning_2fproto_2freference_5fline_5fprovider_5fconfig_2eproto::scc_info_ReferenceLineProviderConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning.ReferenceLineProviderConfig)
}
ReferenceLineProviderConfig::ReferenceLineProviderConfig(const ReferenceLineProviderConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_smooth_config()) {
    smooth_config_ = new ::planning::ReferenceLineSmootherConfig(*from.smooth_config_);
  } else {
    smooth_config_ = NULL;
  }
  ::memcpy(&enable_reference_line_stitching_, &from.enable_reference_line_stitching_,
    static_cast<size_t>(reinterpret_cast<char*>(&smoothed_reference_line_max_diff_) -
    reinterpret_cast<char*>(&enable_reference_line_stitching_)) + sizeof(smoothed_reference_line_max_diff_));
  // @@protoc_insertion_point(copy_constructor:planning.ReferenceLineProviderConfig)
}

void ReferenceLineProviderConfig::SharedCtor() {
  ::memset(&smooth_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&smoothed_reference_line_max_diff_) -
      reinterpret_cast<char*>(&smooth_config_)) + sizeof(smoothed_reference_line_max_diff_));
}

ReferenceLineProviderConfig::~ReferenceLineProviderConfig() {
  // @@protoc_insertion_point(destructor:planning.ReferenceLineProviderConfig)
  SharedDtor();
}

void ReferenceLineProviderConfig::SharedDtor() {
  if (this != internal_default_instance()) delete smooth_config_;
}

void ReferenceLineProviderConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReferenceLineProviderConfig::descriptor() {
  ::protobuf_planning_2fproto_2freference_5fline_5fprovider_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_2fproto_2freference_5fline_5fprovider_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReferenceLineProviderConfig& ReferenceLineProviderConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_planning_2fproto_2freference_5fline_5fprovider_5fconfig_2eproto::scc_info_ReferenceLineProviderConfig.base);
  return *internal_default_instance();
}


void ReferenceLineProviderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:planning.ReferenceLineProviderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && smooth_config_ != NULL) {
    delete smooth_config_;
  }
  smooth_config_ = NULL;
  ::memset(&enable_reference_line_stitching_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&smoothed_reference_line_max_diff_) -
      reinterpret_cast<char*>(&enable_reference_line_stitching_)) + sizeof(smoothed_reference_line_max_diff_));
  _internal_metadata_.Clear();
}

bool ReferenceLineProviderConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planning.ReferenceLineProviderConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .planning.ReferenceLineSmootherConfig smooth_config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_smooth_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable_reference_line_stitching = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_reference_line_stitching_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable_smooth_reference_line = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_smooth_reference_line_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double smoothed_reference_line_max_diff = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &smoothed_reference_line_max_diff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 update_counter = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_counter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planning.ReferenceLineProviderConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planning.ReferenceLineProviderConfig)
  return false;
#undef DO_
}

void ReferenceLineProviderConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planning.ReferenceLineProviderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .planning.ReferenceLineSmootherConfig smooth_config = 1;
  if (this->has_smooth_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_smooth_config(), output);
  }

  // bool enable_reference_line_stitching = 2;
  if (this->enable_reference_line_stitching() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->enable_reference_line_stitching(), output);
  }

  // bool enable_smooth_reference_line = 3;
  if (this->enable_smooth_reference_line() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->enable_smooth_reference_line(), output);
  }

  // double smoothed_reference_line_max_diff = 4;
  if (this->smoothed_reference_line_max_diff() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->smoothed_reference_line_max_diff(), output);
  }

  // uint32 update_counter = 5;
  if (this->update_counter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->update_counter(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:planning.ReferenceLineProviderConfig)
}

::google::protobuf::uint8* ReferenceLineProviderConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:planning.ReferenceLineProviderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .planning.ReferenceLineSmootherConfig smooth_config = 1;
  if (this->has_smooth_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_smooth_config(), deterministic, target);
  }

  // bool enable_reference_line_stitching = 2;
  if (this->enable_reference_line_stitching() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->enable_reference_line_stitching(), target);
  }

  // bool enable_smooth_reference_line = 3;
  if (this->enable_smooth_reference_line() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->enable_smooth_reference_line(), target);
  }

  // double smoothed_reference_line_max_diff = 4;
  if (this->smoothed_reference_line_max_diff() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->smoothed_reference_line_max_diff(), target);
  }

  // uint32 update_counter = 5;
  if (this->update_counter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->update_counter(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning.ReferenceLineProviderConfig)
  return target;
}

size_t ReferenceLineProviderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning.ReferenceLineProviderConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .planning.ReferenceLineSmootherConfig smooth_config = 1;
  if (this->has_smooth_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *smooth_config_);
  }

  // bool enable_reference_line_stitching = 2;
  if (this->enable_reference_line_stitching() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_smooth_reference_line = 3;
  if (this->enable_smooth_reference_line() != 0) {
    total_size += 1 + 1;
  }

  // uint32 update_counter = 5;
  if (this->update_counter() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->update_counter());
  }

  // double smoothed_reference_line_max_diff = 4;
  if (this->smoothed_reference_line_max_diff() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReferenceLineProviderConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning.ReferenceLineProviderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ReferenceLineProviderConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReferenceLineProviderConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning.ReferenceLineProviderConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning.ReferenceLineProviderConfig)
    MergeFrom(*source);
  }
}

void ReferenceLineProviderConfig::MergeFrom(const ReferenceLineProviderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning.ReferenceLineProviderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_smooth_config()) {
    mutable_smooth_config()->::planning::ReferenceLineSmootherConfig::MergeFrom(from.smooth_config());
  }
  if (from.enable_reference_line_stitching() != 0) {
    set_enable_reference_line_stitching(from.enable_reference_line_stitching());
  }
  if (from.enable_smooth_reference_line() != 0) {
    set_enable_smooth_reference_line(from.enable_smooth_reference_line());
  }
  if (from.update_counter() != 0) {
    set_update_counter(from.update_counter());
  }
  if (from.smoothed_reference_line_max_diff() != 0) {
    set_smoothed_reference_line_max_diff(from.smoothed_reference_line_max_diff());
  }
}

void ReferenceLineProviderConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning.ReferenceLineProviderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReferenceLineProviderConfig::CopyFrom(const ReferenceLineProviderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning.ReferenceLineProviderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceLineProviderConfig::IsInitialized() const {
  return true;
}

void ReferenceLineProviderConfig::Swap(ReferenceLineProviderConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReferenceLineProviderConfig::InternalSwap(ReferenceLineProviderConfig* other) {
  using std::swap;
  swap(smooth_config_, other->smooth_config_);
  swap(enable_reference_line_stitching_, other->enable_reference_line_stitching_);
  swap(enable_smooth_reference_line_, other->enable_smooth_reference_line_);
  swap(update_counter_, other->update_counter_);
  swap(smoothed_reference_line_max_diff_, other->smoothed_reference_line_max_diff_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReferenceLineProviderConfig::GetMetadata() const {
  protobuf_planning_2fproto_2freference_5fline_5fprovider_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_2fproto_2freference_5fline_5fprovider_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::planning::QpSplineSmootherConfig* Arena::CreateMaybeMessage< ::planning::QpSplineSmootherConfig >(Arena* arena) {
  return Arena::CreateInternal< ::planning::QpSplineSmootherConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::planning::ReferenceLineSmootherConfig* Arena::CreateMaybeMessage< ::planning::ReferenceLineSmootherConfig >(Arena* arena) {
  return Arena::CreateInternal< ::planning::ReferenceLineSmootherConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::planning::ReferenceLineProviderConfig* Arena::CreateMaybeMessage< ::planning::ReferenceLineProviderConfig >(Arena* arena) {
  return Arena::CreateInternal< ::planning::ReferenceLineProviderConfig >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
