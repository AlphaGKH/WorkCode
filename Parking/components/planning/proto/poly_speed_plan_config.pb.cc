// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planning/proto/poly_speed_plan_config.proto

#include "planning/proto/poly_speed_plan_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_planning_2fproto_2fpoly_5fspeed_5fplan_5fconfig_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_planning_2fproto_2fpoly_5fspeed_5fplan_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PolySpeedCostParam;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_planning_2fproto_2fpoly_5fspeed_5fplan_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PolySpeedSampleConfig;
}  // namespace protobuf_planning_2fproto_2fpoly_5fspeed_5fplan_5fconfig_2eproto
namespace planning {
class PolySpeedSampleConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PolySpeedSampleConfig>
      _instance;
} _PolySpeedSampleConfig_default_instance_;
class PolySpeedCostParamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PolySpeedCostParam>
      _instance;
} _PolySpeedCostParam_default_instance_;
class PolySpeedPlanConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PolySpeedPlanConfig>
      _instance;
} _PolySpeedPlanConfig_default_instance_;
}  // namespace planning
namespace protobuf_planning_2fproto_2fpoly_5fspeed_5fplan_5fconfig_2eproto {
static void InitDefaultsPolySpeedSampleConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::planning::_PolySpeedSampleConfig_default_instance_;
    new (ptr) ::planning::PolySpeedSampleConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planning::PolySpeedSampleConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PolySpeedSampleConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPolySpeedSampleConfig}, {}};

static void InitDefaultsPolySpeedCostParam() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::planning::_PolySpeedCostParam_default_instance_;
    new (ptr) ::planning::PolySpeedCostParam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planning::PolySpeedCostParam::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PolySpeedCostParam =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPolySpeedCostParam}, {}};

static void InitDefaultsPolySpeedPlanConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::planning::_PolySpeedPlanConfig_default_instance_;
    new (ptr) ::planning::PolySpeedPlanConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planning::PolySpeedPlanConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_PolySpeedPlanConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPolySpeedPlanConfig}, {
      &protobuf_planning_2fproto_2fpoly_5fspeed_5fplan_5fconfig_2eproto::scc_info_PolySpeedSampleConfig.base,
      &protobuf_planning_2fproto_2fpoly_5fspeed_5fplan_5fconfig_2eproto::scc_info_PolySpeedCostParam.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_PolySpeedSampleConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PolySpeedCostParam.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PolySpeedPlanConfig.base);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::PolySpeedSampleConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::PolySpeedSampleConfig, time_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::PolySpeedSampleConfig, time_density_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::PolySpeedSampleConfig, lon_buffer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::PolySpeedSampleConfig, num_sample_follow_per_timestamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::PolySpeedCostParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::PolySpeedCostParam, acc_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::PolySpeedCostParam, jerk_weight_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::PolySpeedPlanConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::PolySpeedPlanConfig, sample_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::PolySpeedPlanConfig, cost_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::PolySpeedPlanConfig, top_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::PolySpeedPlanConfig, max_acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::PolySpeedPlanConfig, max_deceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::PolySpeedPlanConfig, keep_clear_low_speed_penalty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::PolySpeedPlanConfig, default_speed_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::PolySpeedPlanConfig, exceed_speed_penalty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::PolySpeedPlanConfig, low_speed_penalty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::PolySpeedPlanConfig, accel_penalty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::PolySpeedPlanConfig, decel_penalty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::PolySpeedPlanConfig, positive_jerk_coeff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning::PolySpeedPlanConfig, negative_jerk_coeff_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::planning::PolySpeedSampleConfig)},
  { 9, -1, sizeof(::planning::PolySpeedCostParam)},
  { 16, -1, sizeof(::planning::PolySpeedPlanConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::planning::_PolySpeedSampleConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::planning::_PolySpeedCostParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::planning::_PolySpeedPlanConfig_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "planning/proto/poly_speed_plan_config.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n+planning/proto/poly_speed_plan_config."
      "proto\022\010planning\"\177\n\025PolySpeedSampleConfig"
      "\022\023\n\013time_length\030\001 \001(\001\022\024\n\014time_density\030\002 "
      "\001(\001\022\022\n\nlon_buffer\030\003 \001(\001\022\'\n\037num_sample_fo"
      "llow_per_timestamp\030\004 \001(\005\"=\n\022PolySpeedCos"
      "tParam\022\022\n\nacc_weight\030\001 \001(\001\022\023\n\013jerk_weigh"
      "t\030\002 \001(\001\"\251\003\n\023PolySpeedPlanConfig\0226\n\rsampl"
      "e_config\030\001 \001(\0132\037.planning.PolySpeedSampl"
      "eConfig\0220\n\ncost_param\030\002 \001(\0132\034.planning.P"
      "olySpeedCostParam\022\021\n\ttop_speed\030\003 \001(\001\022\030\n\020"
      "max_acceleration\030\004 \001(\001\022\030\n\020max_decelerati"
      "on\030\005 \001(\001\022$\n\034keep_clear_low_speed_penalty"
      "\030\006 \001(\001\022\032\n\022default_speed_cost\030\007 \001(\001\022\034\n\024ex"
      "ceed_speed_penalty\030\010 \001(\001\022\031\n\021low_speed_pe"
      "nalty\030\t \001(\001\022\025\n\raccel_penalty\030\n \001(\001\022\025\n\rde"
      "cel_penalty\030\013 \001(\001\022\033\n\023positive_jerk_coeff"
      "\030\014 \001(\001\022\033\n\023negative_jerk_coeff\030\r \001(\001b\006pro"
      "to3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 683);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "planning/proto/poly_speed_plan_config.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_planning_2fproto_2fpoly_5fspeed_5fplan_5fconfig_2eproto
namespace planning {

// ===================================================================

void PolySpeedSampleConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PolySpeedSampleConfig::kTimeLengthFieldNumber;
const int PolySpeedSampleConfig::kTimeDensityFieldNumber;
const int PolySpeedSampleConfig::kLonBufferFieldNumber;
const int PolySpeedSampleConfig::kNumSampleFollowPerTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PolySpeedSampleConfig::PolySpeedSampleConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_planning_2fproto_2fpoly_5fspeed_5fplan_5fconfig_2eproto::scc_info_PolySpeedSampleConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning.PolySpeedSampleConfig)
}
PolySpeedSampleConfig::PolySpeedSampleConfig(const PolySpeedSampleConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_length_, &from.time_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_sample_follow_per_timestamp_) -
    reinterpret_cast<char*>(&time_length_)) + sizeof(num_sample_follow_per_timestamp_));
  // @@protoc_insertion_point(copy_constructor:planning.PolySpeedSampleConfig)
}

void PolySpeedSampleConfig::SharedCtor() {
  ::memset(&time_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_sample_follow_per_timestamp_) -
      reinterpret_cast<char*>(&time_length_)) + sizeof(num_sample_follow_per_timestamp_));
}

PolySpeedSampleConfig::~PolySpeedSampleConfig() {
  // @@protoc_insertion_point(destructor:planning.PolySpeedSampleConfig)
  SharedDtor();
}

void PolySpeedSampleConfig::SharedDtor() {
}

void PolySpeedSampleConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PolySpeedSampleConfig::descriptor() {
  ::protobuf_planning_2fproto_2fpoly_5fspeed_5fplan_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_2fproto_2fpoly_5fspeed_5fplan_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PolySpeedSampleConfig& PolySpeedSampleConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_planning_2fproto_2fpoly_5fspeed_5fplan_5fconfig_2eproto::scc_info_PolySpeedSampleConfig.base);
  return *internal_default_instance();
}


void PolySpeedSampleConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:planning.PolySpeedSampleConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&time_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_sample_follow_per_timestamp_) -
      reinterpret_cast<char*>(&time_length_)) + sizeof(num_sample_follow_per_timestamp_));
  _internal_metadata_.Clear();
}

bool PolySpeedSampleConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planning.PolySpeedSampleConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double time_length = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double time_density = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_density_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lon_buffer = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_buffer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_sample_follow_per_timestamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_sample_follow_per_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planning.PolySpeedSampleConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planning.PolySpeedSampleConfig)
  return false;
#undef DO_
}

void PolySpeedSampleConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planning.PolySpeedSampleConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double time_length = 1;
  if (this->time_length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->time_length(), output);
  }

  // double time_density = 2;
  if (this->time_density() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->time_density(), output);
  }

  // double lon_buffer = 3;
  if (this->lon_buffer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->lon_buffer(), output);
  }

  // int32 num_sample_follow_per_timestamp = 4;
  if (this->num_sample_follow_per_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num_sample_follow_per_timestamp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:planning.PolySpeedSampleConfig)
}

::google::protobuf::uint8* PolySpeedSampleConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:planning.PolySpeedSampleConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double time_length = 1;
  if (this->time_length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->time_length(), target);
  }

  // double time_density = 2;
  if (this->time_density() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->time_density(), target);
  }

  // double lon_buffer = 3;
  if (this->lon_buffer() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->lon_buffer(), target);
  }

  // int32 num_sample_follow_per_timestamp = 4;
  if (this->num_sample_follow_per_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num_sample_follow_per_timestamp(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning.PolySpeedSampleConfig)
  return target;
}

size_t PolySpeedSampleConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning.PolySpeedSampleConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double time_length = 1;
  if (this->time_length() != 0) {
    total_size += 1 + 8;
  }

  // double time_density = 2;
  if (this->time_density() != 0) {
    total_size += 1 + 8;
  }

  // double lon_buffer = 3;
  if (this->lon_buffer() != 0) {
    total_size += 1 + 8;
  }

  // int32 num_sample_follow_per_timestamp = 4;
  if (this->num_sample_follow_per_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_sample_follow_per_timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PolySpeedSampleConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning.PolySpeedSampleConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PolySpeedSampleConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PolySpeedSampleConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning.PolySpeedSampleConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning.PolySpeedSampleConfig)
    MergeFrom(*source);
  }
}

void PolySpeedSampleConfig::MergeFrom(const PolySpeedSampleConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning.PolySpeedSampleConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time_length() != 0) {
    set_time_length(from.time_length());
  }
  if (from.time_density() != 0) {
    set_time_density(from.time_density());
  }
  if (from.lon_buffer() != 0) {
    set_lon_buffer(from.lon_buffer());
  }
  if (from.num_sample_follow_per_timestamp() != 0) {
    set_num_sample_follow_per_timestamp(from.num_sample_follow_per_timestamp());
  }
}

void PolySpeedSampleConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning.PolySpeedSampleConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PolySpeedSampleConfig::CopyFrom(const PolySpeedSampleConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning.PolySpeedSampleConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolySpeedSampleConfig::IsInitialized() const {
  return true;
}

void PolySpeedSampleConfig::Swap(PolySpeedSampleConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PolySpeedSampleConfig::InternalSwap(PolySpeedSampleConfig* other) {
  using std::swap;
  swap(time_length_, other->time_length_);
  swap(time_density_, other->time_density_);
  swap(lon_buffer_, other->lon_buffer_);
  swap(num_sample_follow_per_timestamp_, other->num_sample_follow_per_timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PolySpeedSampleConfig::GetMetadata() const {
  protobuf_planning_2fproto_2fpoly_5fspeed_5fplan_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_2fproto_2fpoly_5fspeed_5fplan_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PolySpeedCostParam::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PolySpeedCostParam::kAccWeightFieldNumber;
const int PolySpeedCostParam::kJerkWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PolySpeedCostParam::PolySpeedCostParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_planning_2fproto_2fpoly_5fspeed_5fplan_5fconfig_2eproto::scc_info_PolySpeedCostParam.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning.PolySpeedCostParam)
}
PolySpeedCostParam::PolySpeedCostParam(const PolySpeedCostParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&acc_weight_, &from.acc_weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&jerk_weight_) -
    reinterpret_cast<char*>(&acc_weight_)) + sizeof(jerk_weight_));
  // @@protoc_insertion_point(copy_constructor:planning.PolySpeedCostParam)
}

void PolySpeedCostParam::SharedCtor() {
  ::memset(&acc_weight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&jerk_weight_) -
      reinterpret_cast<char*>(&acc_weight_)) + sizeof(jerk_weight_));
}

PolySpeedCostParam::~PolySpeedCostParam() {
  // @@protoc_insertion_point(destructor:planning.PolySpeedCostParam)
  SharedDtor();
}

void PolySpeedCostParam::SharedDtor() {
}

void PolySpeedCostParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PolySpeedCostParam::descriptor() {
  ::protobuf_planning_2fproto_2fpoly_5fspeed_5fplan_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_2fproto_2fpoly_5fspeed_5fplan_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PolySpeedCostParam& PolySpeedCostParam::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_planning_2fproto_2fpoly_5fspeed_5fplan_5fconfig_2eproto::scc_info_PolySpeedCostParam.base);
  return *internal_default_instance();
}


void PolySpeedCostParam::Clear() {
// @@protoc_insertion_point(message_clear_start:planning.PolySpeedCostParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&acc_weight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&jerk_weight_) -
      reinterpret_cast<char*>(&acc_weight_)) + sizeof(jerk_weight_));
  _internal_metadata_.Clear();
}

bool PolySpeedCostParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planning.PolySpeedCostParam)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double acc_weight = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double jerk_weight = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &jerk_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planning.PolySpeedCostParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planning.PolySpeedCostParam)
  return false;
#undef DO_
}

void PolySpeedCostParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planning.PolySpeedCostParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double acc_weight = 1;
  if (this->acc_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->acc_weight(), output);
  }

  // double jerk_weight = 2;
  if (this->jerk_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->jerk_weight(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:planning.PolySpeedCostParam)
}

::google::protobuf::uint8* PolySpeedCostParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:planning.PolySpeedCostParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double acc_weight = 1;
  if (this->acc_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->acc_weight(), target);
  }

  // double jerk_weight = 2;
  if (this->jerk_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->jerk_weight(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning.PolySpeedCostParam)
  return target;
}

size_t PolySpeedCostParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning.PolySpeedCostParam)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double acc_weight = 1;
  if (this->acc_weight() != 0) {
    total_size += 1 + 8;
  }

  // double jerk_weight = 2;
  if (this->jerk_weight() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PolySpeedCostParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning.PolySpeedCostParam)
  GOOGLE_DCHECK_NE(&from, this);
  const PolySpeedCostParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PolySpeedCostParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning.PolySpeedCostParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning.PolySpeedCostParam)
    MergeFrom(*source);
  }
}

void PolySpeedCostParam::MergeFrom(const PolySpeedCostParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning.PolySpeedCostParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.acc_weight() != 0) {
    set_acc_weight(from.acc_weight());
  }
  if (from.jerk_weight() != 0) {
    set_jerk_weight(from.jerk_weight());
  }
}

void PolySpeedCostParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning.PolySpeedCostParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PolySpeedCostParam::CopyFrom(const PolySpeedCostParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning.PolySpeedCostParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolySpeedCostParam::IsInitialized() const {
  return true;
}

void PolySpeedCostParam::Swap(PolySpeedCostParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PolySpeedCostParam::InternalSwap(PolySpeedCostParam* other) {
  using std::swap;
  swap(acc_weight_, other->acc_weight_);
  swap(jerk_weight_, other->jerk_weight_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PolySpeedCostParam::GetMetadata() const {
  protobuf_planning_2fproto_2fpoly_5fspeed_5fplan_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_2fproto_2fpoly_5fspeed_5fplan_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PolySpeedPlanConfig::InitAsDefaultInstance() {
  ::planning::_PolySpeedPlanConfig_default_instance_._instance.get_mutable()->sample_config_ = const_cast< ::planning::PolySpeedSampleConfig*>(
      ::planning::PolySpeedSampleConfig::internal_default_instance());
  ::planning::_PolySpeedPlanConfig_default_instance_._instance.get_mutable()->cost_param_ = const_cast< ::planning::PolySpeedCostParam*>(
      ::planning::PolySpeedCostParam::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PolySpeedPlanConfig::kSampleConfigFieldNumber;
const int PolySpeedPlanConfig::kCostParamFieldNumber;
const int PolySpeedPlanConfig::kTopSpeedFieldNumber;
const int PolySpeedPlanConfig::kMaxAccelerationFieldNumber;
const int PolySpeedPlanConfig::kMaxDecelerationFieldNumber;
const int PolySpeedPlanConfig::kKeepClearLowSpeedPenaltyFieldNumber;
const int PolySpeedPlanConfig::kDefaultSpeedCostFieldNumber;
const int PolySpeedPlanConfig::kExceedSpeedPenaltyFieldNumber;
const int PolySpeedPlanConfig::kLowSpeedPenaltyFieldNumber;
const int PolySpeedPlanConfig::kAccelPenaltyFieldNumber;
const int PolySpeedPlanConfig::kDecelPenaltyFieldNumber;
const int PolySpeedPlanConfig::kPositiveJerkCoeffFieldNumber;
const int PolySpeedPlanConfig::kNegativeJerkCoeffFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PolySpeedPlanConfig::PolySpeedPlanConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_planning_2fproto_2fpoly_5fspeed_5fplan_5fconfig_2eproto::scc_info_PolySpeedPlanConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning.PolySpeedPlanConfig)
}
PolySpeedPlanConfig::PolySpeedPlanConfig(const PolySpeedPlanConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sample_config()) {
    sample_config_ = new ::planning::PolySpeedSampleConfig(*from.sample_config_);
  } else {
    sample_config_ = NULL;
  }
  if (from.has_cost_param()) {
    cost_param_ = new ::planning::PolySpeedCostParam(*from.cost_param_);
  } else {
    cost_param_ = NULL;
  }
  ::memcpy(&top_speed_, &from.top_speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&negative_jerk_coeff_) -
    reinterpret_cast<char*>(&top_speed_)) + sizeof(negative_jerk_coeff_));
  // @@protoc_insertion_point(copy_constructor:planning.PolySpeedPlanConfig)
}

void PolySpeedPlanConfig::SharedCtor() {
  ::memset(&sample_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&negative_jerk_coeff_) -
      reinterpret_cast<char*>(&sample_config_)) + sizeof(negative_jerk_coeff_));
}

PolySpeedPlanConfig::~PolySpeedPlanConfig() {
  // @@protoc_insertion_point(destructor:planning.PolySpeedPlanConfig)
  SharedDtor();
}

void PolySpeedPlanConfig::SharedDtor() {
  if (this != internal_default_instance()) delete sample_config_;
  if (this != internal_default_instance()) delete cost_param_;
}

void PolySpeedPlanConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PolySpeedPlanConfig::descriptor() {
  ::protobuf_planning_2fproto_2fpoly_5fspeed_5fplan_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_2fproto_2fpoly_5fspeed_5fplan_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PolySpeedPlanConfig& PolySpeedPlanConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_planning_2fproto_2fpoly_5fspeed_5fplan_5fconfig_2eproto::scc_info_PolySpeedPlanConfig.base);
  return *internal_default_instance();
}


void PolySpeedPlanConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:planning.PolySpeedPlanConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && sample_config_ != NULL) {
    delete sample_config_;
  }
  sample_config_ = NULL;
  if (GetArenaNoVirtual() == NULL && cost_param_ != NULL) {
    delete cost_param_;
  }
  cost_param_ = NULL;
  ::memset(&top_speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&negative_jerk_coeff_) -
      reinterpret_cast<char*>(&top_speed_)) + sizeof(negative_jerk_coeff_));
  _internal_metadata_.Clear();
}

bool PolySpeedPlanConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planning.PolySpeedPlanConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .planning.PolySpeedSampleConfig sample_config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sample_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .planning.PolySpeedCostParam cost_param = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cost_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double top_speed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &top_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double max_acceleration = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_acceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double max_deceleration = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_deceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double keep_clear_low_speed_penalty = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &keep_clear_low_speed_penalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double default_speed_cost = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &default_speed_cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double exceed_speed_penalty = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &exceed_speed_penalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double low_speed_penalty = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &low_speed_penalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double accel_penalty = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &accel_penalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double decel_penalty = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &decel_penalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double positive_jerk_coeff = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &positive_jerk_coeff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double negative_jerk_coeff = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &negative_jerk_coeff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planning.PolySpeedPlanConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planning.PolySpeedPlanConfig)
  return false;
#undef DO_
}

void PolySpeedPlanConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planning.PolySpeedPlanConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .planning.PolySpeedSampleConfig sample_config = 1;
  if (this->has_sample_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_sample_config(), output);
  }

  // .planning.PolySpeedCostParam cost_param = 2;
  if (this->has_cost_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_cost_param(), output);
  }

  // double top_speed = 3;
  if (this->top_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->top_speed(), output);
  }

  // double max_acceleration = 4;
  if (this->max_acceleration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->max_acceleration(), output);
  }

  // double max_deceleration = 5;
  if (this->max_deceleration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->max_deceleration(), output);
  }

  // double keep_clear_low_speed_penalty = 6;
  if (this->keep_clear_low_speed_penalty() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->keep_clear_low_speed_penalty(), output);
  }

  // double default_speed_cost = 7;
  if (this->default_speed_cost() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->default_speed_cost(), output);
  }

  // double exceed_speed_penalty = 8;
  if (this->exceed_speed_penalty() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->exceed_speed_penalty(), output);
  }

  // double low_speed_penalty = 9;
  if (this->low_speed_penalty() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->low_speed_penalty(), output);
  }

  // double accel_penalty = 10;
  if (this->accel_penalty() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->accel_penalty(), output);
  }

  // double decel_penalty = 11;
  if (this->decel_penalty() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->decel_penalty(), output);
  }

  // double positive_jerk_coeff = 12;
  if (this->positive_jerk_coeff() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->positive_jerk_coeff(), output);
  }

  // double negative_jerk_coeff = 13;
  if (this->negative_jerk_coeff() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->negative_jerk_coeff(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:planning.PolySpeedPlanConfig)
}

::google::protobuf::uint8* PolySpeedPlanConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:planning.PolySpeedPlanConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .planning.PolySpeedSampleConfig sample_config = 1;
  if (this->has_sample_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_sample_config(), deterministic, target);
  }

  // .planning.PolySpeedCostParam cost_param = 2;
  if (this->has_cost_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_cost_param(), deterministic, target);
  }

  // double top_speed = 3;
  if (this->top_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->top_speed(), target);
  }

  // double max_acceleration = 4;
  if (this->max_acceleration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->max_acceleration(), target);
  }

  // double max_deceleration = 5;
  if (this->max_deceleration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->max_deceleration(), target);
  }

  // double keep_clear_low_speed_penalty = 6;
  if (this->keep_clear_low_speed_penalty() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->keep_clear_low_speed_penalty(), target);
  }

  // double default_speed_cost = 7;
  if (this->default_speed_cost() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->default_speed_cost(), target);
  }

  // double exceed_speed_penalty = 8;
  if (this->exceed_speed_penalty() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->exceed_speed_penalty(), target);
  }

  // double low_speed_penalty = 9;
  if (this->low_speed_penalty() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->low_speed_penalty(), target);
  }

  // double accel_penalty = 10;
  if (this->accel_penalty() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->accel_penalty(), target);
  }

  // double decel_penalty = 11;
  if (this->decel_penalty() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->decel_penalty(), target);
  }

  // double positive_jerk_coeff = 12;
  if (this->positive_jerk_coeff() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->positive_jerk_coeff(), target);
  }

  // double negative_jerk_coeff = 13;
  if (this->negative_jerk_coeff() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->negative_jerk_coeff(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning.PolySpeedPlanConfig)
  return target;
}

size_t PolySpeedPlanConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning.PolySpeedPlanConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .planning.PolySpeedSampleConfig sample_config = 1;
  if (this->has_sample_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sample_config_);
  }

  // .planning.PolySpeedCostParam cost_param = 2;
  if (this->has_cost_param()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *cost_param_);
  }

  // double top_speed = 3;
  if (this->top_speed() != 0) {
    total_size += 1 + 8;
  }

  // double max_acceleration = 4;
  if (this->max_acceleration() != 0) {
    total_size += 1 + 8;
  }

  // double max_deceleration = 5;
  if (this->max_deceleration() != 0) {
    total_size += 1 + 8;
  }

  // double keep_clear_low_speed_penalty = 6;
  if (this->keep_clear_low_speed_penalty() != 0) {
    total_size += 1 + 8;
  }

  // double default_speed_cost = 7;
  if (this->default_speed_cost() != 0) {
    total_size += 1 + 8;
  }

  // double exceed_speed_penalty = 8;
  if (this->exceed_speed_penalty() != 0) {
    total_size += 1 + 8;
  }

  // double low_speed_penalty = 9;
  if (this->low_speed_penalty() != 0) {
    total_size += 1 + 8;
  }

  // double accel_penalty = 10;
  if (this->accel_penalty() != 0) {
    total_size += 1 + 8;
  }

  // double decel_penalty = 11;
  if (this->decel_penalty() != 0) {
    total_size += 1 + 8;
  }

  // double positive_jerk_coeff = 12;
  if (this->positive_jerk_coeff() != 0) {
    total_size += 1 + 8;
  }

  // double negative_jerk_coeff = 13;
  if (this->negative_jerk_coeff() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PolySpeedPlanConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning.PolySpeedPlanConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PolySpeedPlanConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PolySpeedPlanConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning.PolySpeedPlanConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning.PolySpeedPlanConfig)
    MergeFrom(*source);
  }
}

void PolySpeedPlanConfig::MergeFrom(const PolySpeedPlanConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning.PolySpeedPlanConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sample_config()) {
    mutable_sample_config()->::planning::PolySpeedSampleConfig::MergeFrom(from.sample_config());
  }
  if (from.has_cost_param()) {
    mutable_cost_param()->::planning::PolySpeedCostParam::MergeFrom(from.cost_param());
  }
  if (from.top_speed() != 0) {
    set_top_speed(from.top_speed());
  }
  if (from.max_acceleration() != 0) {
    set_max_acceleration(from.max_acceleration());
  }
  if (from.max_deceleration() != 0) {
    set_max_deceleration(from.max_deceleration());
  }
  if (from.keep_clear_low_speed_penalty() != 0) {
    set_keep_clear_low_speed_penalty(from.keep_clear_low_speed_penalty());
  }
  if (from.default_speed_cost() != 0) {
    set_default_speed_cost(from.default_speed_cost());
  }
  if (from.exceed_speed_penalty() != 0) {
    set_exceed_speed_penalty(from.exceed_speed_penalty());
  }
  if (from.low_speed_penalty() != 0) {
    set_low_speed_penalty(from.low_speed_penalty());
  }
  if (from.accel_penalty() != 0) {
    set_accel_penalty(from.accel_penalty());
  }
  if (from.decel_penalty() != 0) {
    set_decel_penalty(from.decel_penalty());
  }
  if (from.positive_jerk_coeff() != 0) {
    set_positive_jerk_coeff(from.positive_jerk_coeff());
  }
  if (from.negative_jerk_coeff() != 0) {
    set_negative_jerk_coeff(from.negative_jerk_coeff());
  }
}

void PolySpeedPlanConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning.PolySpeedPlanConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PolySpeedPlanConfig::CopyFrom(const PolySpeedPlanConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning.PolySpeedPlanConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolySpeedPlanConfig::IsInitialized() const {
  return true;
}

void PolySpeedPlanConfig::Swap(PolySpeedPlanConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PolySpeedPlanConfig::InternalSwap(PolySpeedPlanConfig* other) {
  using std::swap;
  swap(sample_config_, other->sample_config_);
  swap(cost_param_, other->cost_param_);
  swap(top_speed_, other->top_speed_);
  swap(max_acceleration_, other->max_acceleration_);
  swap(max_deceleration_, other->max_deceleration_);
  swap(keep_clear_low_speed_penalty_, other->keep_clear_low_speed_penalty_);
  swap(default_speed_cost_, other->default_speed_cost_);
  swap(exceed_speed_penalty_, other->exceed_speed_penalty_);
  swap(low_speed_penalty_, other->low_speed_penalty_);
  swap(accel_penalty_, other->accel_penalty_);
  swap(decel_penalty_, other->decel_penalty_);
  swap(positive_jerk_coeff_, other->positive_jerk_coeff_);
  swap(negative_jerk_coeff_, other->negative_jerk_coeff_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PolySpeedPlanConfig::GetMetadata() const {
  protobuf_planning_2fproto_2fpoly_5fspeed_5fplan_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_2fproto_2fpoly_5fspeed_5fplan_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::planning::PolySpeedSampleConfig* Arena::CreateMaybeMessage< ::planning::PolySpeedSampleConfig >(Arena* arena) {
  return Arena::CreateInternal< ::planning::PolySpeedSampleConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::planning::PolySpeedCostParam* Arena::CreateMaybeMessage< ::planning::PolySpeedCostParam >(Arena* arena) {
  return Arena::CreateInternal< ::planning::PolySpeedCostParam >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::planning::PolySpeedPlanConfig* Arena::CreateMaybeMessage< ::planning::PolySpeedPlanConfig >(Arena* arena) {
  return Arena::CreateInternal< ::planning::PolySpeedPlanConfig >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
