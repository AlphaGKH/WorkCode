// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control/proto/control_config.proto

#ifndef PROTOBUF_INCLUDED_control_2fproto_2fcontrol_5fconfig_2eproto
#define PROTOBUF_INCLUDED_control_2fproto_2fcontrol_5fconfig_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_control_2fproto_2fcontrol_5fconfig_2eproto 

namespace protobuf_control_2fproto_2fcontrol_5fconfig_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_control_2fproto_2fcontrol_5fconfig_2eproto
namespace control {
class ControlConfig;
class ControlConfigDefaultTypeInternal;
extern ControlConfigDefaultTypeInternal _ControlConfig_default_instance_;
}  // namespace control
namespace google {
namespace protobuf {
template<> ::control::ControlConfig* Arena::CreateMaybeMessage<::control::ControlConfig>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace control {

enum ControlConfig_ControllerType {
  ControlConfig_ControllerType_PID = 0,
  ControlConfig_ControllerType_LQR = 1,
  ControlConfig_ControllerType_MPC = 2,
  ControlConfig_ControllerType_ControlConfig_ControllerType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ControlConfig_ControllerType_ControlConfig_ControllerType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ControlConfig_ControllerType_IsValid(int value);
const ControlConfig_ControllerType ControlConfig_ControllerType_ControllerType_MIN = ControlConfig_ControllerType_PID;
const ControlConfig_ControllerType ControlConfig_ControllerType_ControllerType_MAX = ControlConfig_ControllerType_MPC;
const int ControlConfig_ControllerType_ControllerType_ARRAYSIZE = ControlConfig_ControllerType_ControllerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ControlConfig_ControllerType_descriptor();
inline const ::std::string& ControlConfig_ControllerType_Name(ControlConfig_ControllerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ControlConfig_ControllerType_descriptor(), value);
}
inline bool ControlConfig_ControllerType_Parse(
    const ::std::string& name, ControlConfig_ControllerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ControlConfig_ControllerType>(
    ControlConfig_ControllerType_descriptor(), name, value);
}
// ===================================================================

class ControlConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:control.ControlConfig) */ {
 public:
  ControlConfig();
  virtual ~ControlConfig();

  ControlConfig(const ControlConfig& from);

  inline ControlConfig& operator=(const ControlConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ControlConfig(ControlConfig&& from) noexcept
    : ControlConfig() {
    *this = ::std::move(from);
  }

  inline ControlConfig& operator=(ControlConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ControlConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControlConfig* internal_default_instance() {
    return reinterpret_cast<const ControlConfig*>(
               &_ControlConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ControlConfig* other);
  friend void swap(ControlConfig& a, ControlConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ControlConfig* New() const final {
    return CreateMaybeMessage<ControlConfig>(NULL);
  }

  ControlConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ControlConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ControlConfig& from);
  void MergeFrom(const ControlConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ControlConfig_ControllerType ControllerType;
  static const ControllerType PID =
    ControlConfig_ControllerType_PID;
  static const ControllerType LQR =
    ControlConfig_ControllerType_LQR;
  static const ControllerType MPC =
    ControlConfig_ControllerType_MPC;
  static inline bool ControllerType_IsValid(int value) {
    return ControlConfig_ControllerType_IsValid(value);
  }
  static const ControllerType ControllerType_MIN =
    ControlConfig_ControllerType_ControllerType_MIN;
  static const ControllerType ControllerType_MAX =
    ControlConfig_ControllerType_ControllerType_MAX;
  static const int ControllerType_ARRAYSIZE =
    ControlConfig_ControllerType_ControllerType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ControllerType_descriptor() {
    return ControlConfig_ControllerType_descriptor();
  }
  static inline const ::std::string& ControllerType_Name(ControllerType value) {
    return ControlConfig_ControllerType_Name(value);
  }
  static inline bool ControllerType_Parse(const ::std::string& name,
      ControllerType* value) {
    return ControlConfig_ControllerType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .control.ControlConfig.ControllerType controller_type = 1;
  void clear_controller_type();
  static const int kControllerTypeFieldNumber = 1;
  ::control::ControlConfig_ControllerType controller_type() const;
  void set_controller_type(::control::ControlConfig_ControllerType value);

  // @@protoc_insertion_point(class_scope:control.ControlConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int controller_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_control_2fproto_2fcontrol_5fconfig_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ControlConfig

// .control.ControlConfig.ControllerType controller_type = 1;
inline void ControlConfig::clear_controller_type() {
  controller_type_ = 0;
}
inline ::control::ControlConfig_ControllerType ControlConfig::controller_type() const {
  // @@protoc_insertion_point(field_get:control.ControlConfig.controller_type)
  return static_cast< ::control::ControlConfig_ControllerType >(controller_type_);
}
inline void ControlConfig::set_controller_type(::control::ControlConfig_ControllerType value) {
  
  controller_type_ = value;
  // @@protoc_insertion_point(field_set:control.ControlConfig.controller_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace control

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::control::ControlConfig_ControllerType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::control::ControlConfig_ControllerType>() {
  return ::control::ControlConfig_ControllerType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_control_2fproto_2fcontrol_5fconfig_2eproto
