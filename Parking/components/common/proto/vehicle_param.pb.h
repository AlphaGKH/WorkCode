// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/proto/vehicle_param.proto

#ifndef PROTOBUF_INCLUDED_common_2fproto_2fvehicle_5fparam_2eproto
#define PROTOBUF_INCLUDED_common_2fproto_2fvehicle_5fparam_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_common_2fproto_2fvehicle_5fparam_2eproto 

namespace protobuf_common_2fproto_2fvehicle_5fparam_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_common_2fproto_2fvehicle_5fparam_2eproto
namespace common {
class VehicleParam;
class VehicleParamDefaultTypeInternal;
extern VehicleParamDefaultTypeInternal _VehicleParam_default_instance_;
}  // namespace common
namespace google {
namespace protobuf {
template<> ::common::VehicleParam* Arena::CreateMaybeMessage<::common::VehicleParam>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace common {

enum VehicleBrand {
  RAY = 0,
  LEAPS1 = 1,
  VehicleBrand_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  VehicleBrand_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool VehicleBrand_IsValid(int value);
const VehicleBrand VehicleBrand_MIN = RAY;
const VehicleBrand VehicleBrand_MAX = LEAPS1;
const int VehicleBrand_ARRAYSIZE = VehicleBrand_MAX + 1;

const ::google::protobuf::EnumDescriptor* VehicleBrand_descriptor();
inline const ::std::string& VehicleBrand_Name(VehicleBrand value) {
  return ::google::protobuf::internal::NameOfEnum(
    VehicleBrand_descriptor(), value);
}
inline bool VehicleBrand_Parse(
    const ::std::string& name, VehicleBrand* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VehicleBrand>(
    VehicleBrand_descriptor(), name, value);
}
// ===================================================================

class VehicleParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:common.VehicleParam) */ {
 public:
  VehicleParam();
  virtual ~VehicleParam();

  VehicleParam(const VehicleParam& from);

  inline VehicleParam& operator=(const VehicleParam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VehicleParam(VehicleParam&& from) noexcept
    : VehicleParam() {
    *this = ::std::move(from);
  }

  inline VehicleParam& operator=(VehicleParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VehicleParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehicleParam* internal_default_instance() {
    return reinterpret_cast<const VehicleParam*>(
               &_VehicleParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(VehicleParam* other);
  friend void swap(VehicleParam& a, VehicleParam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VehicleParam* New() const final {
    return CreateMaybeMessage<VehicleParam>(NULL);
  }

  VehicleParam* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VehicleParam>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VehicleParam& from);
  void MergeFrom(const VehicleParam& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double front_edge_to_center = 2;
  void clear_front_edge_to_center();
  static const int kFrontEdgeToCenterFieldNumber = 2;
  double front_edge_to_center() const;
  void set_front_edge_to_center(double value);

  // double back_edge_to_center = 3;
  void clear_back_edge_to_center();
  static const int kBackEdgeToCenterFieldNumber = 3;
  double back_edge_to_center() const;
  void set_back_edge_to_center(double value);

  // double left_edge_to_center = 4;
  void clear_left_edge_to_center();
  static const int kLeftEdgeToCenterFieldNumber = 4;
  double left_edge_to_center() const;
  void set_left_edge_to_center(double value);

  // double right_edge_to_center = 5;
  void clear_right_edge_to_center();
  static const int kRightEdgeToCenterFieldNumber = 5;
  double right_edge_to_center() const;
  void set_right_edge_to_center(double value);

  // double length = 6;
  void clear_length();
  static const int kLengthFieldNumber = 6;
  double length() const;
  void set_length(double value);

  // double width = 7;
  void clear_width();
  static const int kWidthFieldNumber = 7;
  double width() const;
  void set_width(double value);

  // double height = 8;
  void clear_height();
  static const int kHeightFieldNumber = 8;
  double height() const;
  void set_height(double value);

  // double min_turn_radius = 9;
  void clear_min_turn_radius();
  static const int kMinTurnRadiusFieldNumber = 9;
  double min_turn_radius() const;
  void set_min_turn_radius(double value);

  // double max_acceleration = 10;
  void clear_max_acceleration();
  static const int kMaxAccelerationFieldNumber = 10;
  double max_acceleration() const;
  void set_max_acceleration(double value);

  // double max_deceleration = 11;
  void clear_max_deceleration();
  static const int kMaxDecelerationFieldNumber = 11;
  double max_deceleration() const;
  void set_max_deceleration(double value);

  // double max_steer_angle = 12;
  void clear_max_steer_angle();
  static const int kMaxSteerAngleFieldNumber = 12;
  double max_steer_angle() const;
  void set_max_steer_angle(double value);

  // double max_steer_angle_rate = 13;
  void clear_max_steer_angle_rate();
  static const int kMaxSteerAngleRateFieldNumber = 13;
  double max_steer_angle_rate() const;
  void set_max_steer_angle_rate(double value);

  // double min_steer_angle_rate = 14;
  void clear_min_steer_angle_rate();
  static const int kMinSteerAngleRateFieldNumber = 14;
  double min_steer_angle_rate() const;
  void set_min_steer_angle_rate(double value);

  // double steer_ratio = 15;
  void clear_steer_ratio();
  static const int kSteerRatioFieldNumber = 15;
  double steer_ratio() const;
  void set_steer_ratio(double value);

  // double wheel_base = 16;
  void clear_wheel_base();
  static const int kWheelBaseFieldNumber = 16;
  double wheel_base() const;
  void set_wheel_base(double value);

  // double wheel_rolling_radius = 17;
  void clear_wheel_rolling_radius();
  static const int kWheelRollingRadiusFieldNumber = 17;
  double wheel_rolling_radius() const;
  void set_wheel_rolling_radius(double value);

  // .common.VehicleBrand brand = 1;
  void clear_brand();
  static const int kBrandFieldNumber = 1;
  ::common::VehicleBrand brand() const;
  void set_brand(::common::VehicleBrand value);

  // @@protoc_insertion_point(class_scope:common.VehicleParam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double front_edge_to_center_;
  double back_edge_to_center_;
  double left_edge_to_center_;
  double right_edge_to_center_;
  double length_;
  double width_;
  double height_;
  double min_turn_radius_;
  double max_acceleration_;
  double max_deceleration_;
  double max_steer_angle_;
  double max_steer_angle_rate_;
  double min_steer_angle_rate_;
  double steer_ratio_;
  double wheel_base_;
  double wheel_rolling_radius_;
  int brand_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_common_2fproto_2fvehicle_5fparam_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VehicleParam

// .common.VehicleBrand brand = 1;
inline void VehicleParam::clear_brand() {
  brand_ = 0;
}
inline ::common::VehicleBrand VehicleParam::brand() const {
  // @@protoc_insertion_point(field_get:common.VehicleParam.brand)
  return static_cast< ::common::VehicleBrand >(brand_);
}
inline void VehicleParam::set_brand(::common::VehicleBrand value) {
  
  brand_ = value;
  // @@protoc_insertion_point(field_set:common.VehicleParam.brand)
}

// double front_edge_to_center = 2;
inline void VehicleParam::clear_front_edge_to_center() {
  front_edge_to_center_ = 0;
}
inline double VehicleParam::front_edge_to_center() const {
  // @@protoc_insertion_point(field_get:common.VehicleParam.front_edge_to_center)
  return front_edge_to_center_;
}
inline void VehicleParam::set_front_edge_to_center(double value) {
  
  front_edge_to_center_ = value;
  // @@protoc_insertion_point(field_set:common.VehicleParam.front_edge_to_center)
}

// double back_edge_to_center = 3;
inline void VehicleParam::clear_back_edge_to_center() {
  back_edge_to_center_ = 0;
}
inline double VehicleParam::back_edge_to_center() const {
  // @@protoc_insertion_point(field_get:common.VehicleParam.back_edge_to_center)
  return back_edge_to_center_;
}
inline void VehicleParam::set_back_edge_to_center(double value) {
  
  back_edge_to_center_ = value;
  // @@protoc_insertion_point(field_set:common.VehicleParam.back_edge_to_center)
}

// double left_edge_to_center = 4;
inline void VehicleParam::clear_left_edge_to_center() {
  left_edge_to_center_ = 0;
}
inline double VehicleParam::left_edge_to_center() const {
  // @@protoc_insertion_point(field_get:common.VehicleParam.left_edge_to_center)
  return left_edge_to_center_;
}
inline void VehicleParam::set_left_edge_to_center(double value) {
  
  left_edge_to_center_ = value;
  // @@protoc_insertion_point(field_set:common.VehicleParam.left_edge_to_center)
}

// double right_edge_to_center = 5;
inline void VehicleParam::clear_right_edge_to_center() {
  right_edge_to_center_ = 0;
}
inline double VehicleParam::right_edge_to_center() const {
  // @@protoc_insertion_point(field_get:common.VehicleParam.right_edge_to_center)
  return right_edge_to_center_;
}
inline void VehicleParam::set_right_edge_to_center(double value) {
  
  right_edge_to_center_ = value;
  // @@protoc_insertion_point(field_set:common.VehicleParam.right_edge_to_center)
}

// double length = 6;
inline void VehicleParam::clear_length() {
  length_ = 0;
}
inline double VehicleParam::length() const {
  // @@protoc_insertion_point(field_get:common.VehicleParam.length)
  return length_;
}
inline void VehicleParam::set_length(double value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:common.VehicleParam.length)
}

// double width = 7;
inline void VehicleParam::clear_width() {
  width_ = 0;
}
inline double VehicleParam::width() const {
  // @@protoc_insertion_point(field_get:common.VehicleParam.width)
  return width_;
}
inline void VehicleParam::set_width(double value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:common.VehicleParam.width)
}

// double height = 8;
inline void VehicleParam::clear_height() {
  height_ = 0;
}
inline double VehicleParam::height() const {
  // @@protoc_insertion_point(field_get:common.VehicleParam.height)
  return height_;
}
inline void VehicleParam::set_height(double value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:common.VehicleParam.height)
}

// double min_turn_radius = 9;
inline void VehicleParam::clear_min_turn_radius() {
  min_turn_radius_ = 0;
}
inline double VehicleParam::min_turn_radius() const {
  // @@protoc_insertion_point(field_get:common.VehicleParam.min_turn_radius)
  return min_turn_radius_;
}
inline void VehicleParam::set_min_turn_radius(double value) {
  
  min_turn_radius_ = value;
  // @@protoc_insertion_point(field_set:common.VehicleParam.min_turn_radius)
}

// double max_acceleration = 10;
inline void VehicleParam::clear_max_acceleration() {
  max_acceleration_ = 0;
}
inline double VehicleParam::max_acceleration() const {
  // @@protoc_insertion_point(field_get:common.VehicleParam.max_acceleration)
  return max_acceleration_;
}
inline void VehicleParam::set_max_acceleration(double value) {
  
  max_acceleration_ = value;
  // @@protoc_insertion_point(field_set:common.VehicleParam.max_acceleration)
}

// double max_deceleration = 11;
inline void VehicleParam::clear_max_deceleration() {
  max_deceleration_ = 0;
}
inline double VehicleParam::max_deceleration() const {
  // @@protoc_insertion_point(field_get:common.VehicleParam.max_deceleration)
  return max_deceleration_;
}
inline void VehicleParam::set_max_deceleration(double value) {
  
  max_deceleration_ = value;
  // @@protoc_insertion_point(field_set:common.VehicleParam.max_deceleration)
}

// double max_steer_angle = 12;
inline void VehicleParam::clear_max_steer_angle() {
  max_steer_angle_ = 0;
}
inline double VehicleParam::max_steer_angle() const {
  // @@protoc_insertion_point(field_get:common.VehicleParam.max_steer_angle)
  return max_steer_angle_;
}
inline void VehicleParam::set_max_steer_angle(double value) {
  
  max_steer_angle_ = value;
  // @@protoc_insertion_point(field_set:common.VehicleParam.max_steer_angle)
}

// double max_steer_angle_rate = 13;
inline void VehicleParam::clear_max_steer_angle_rate() {
  max_steer_angle_rate_ = 0;
}
inline double VehicleParam::max_steer_angle_rate() const {
  // @@protoc_insertion_point(field_get:common.VehicleParam.max_steer_angle_rate)
  return max_steer_angle_rate_;
}
inline void VehicleParam::set_max_steer_angle_rate(double value) {
  
  max_steer_angle_rate_ = value;
  // @@protoc_insertion_point(field_set:common.VehicleParam.max_steer_angle_rate)
}

// double min_steer_angle_rate = 14;
inline void VehicleParam::clear_min_steer_angle_rate() {
  min_steer_angle_rate_ = 0;
}
inline double VehicleParam::min_steer_angle_rate() const {
  // @@protoc_insertion_point(field_get:common.VehicleParam.min_steer_angle_rate)
  return min_steer_angle_rate_;
}
inline void VehicleParam::set_min_steer_angle_rate(double value) {
  
  min_steer_angle_rate_ = value;
  // @@protoc_insertion_point(field_set:common.VehicleParam.min_steer_angle_rate)
}

// double steer_ratio = 15;
inline void VehicleParam::clear_steer_ratio() {
  steer_ratio_ = 0;
}
inline double VehicleParam::steer_ratio() const {
  // @@protoc_insertion_point(field_get:common.VehicleParam.steer_ratio)
  return steer_ratio_;
}
inline void VehicleParam::set_steer_ratio(double value) {
  
  steer_ratio_ = value;
  // @@protoc_insertion_point(field_set:common.VehicleParam.steer_ratio)
}

// double wheel_base = 16;
inline void VehicleParam::clear_wheel_base() {
  wheel_base_ = 0;
}
inline double VehicleParam::wheel_base() const {
  // @@protoc_insertion_point(field_get:common.VehicleParam.wheel_base)
  return wheel_base_;
}
inline void VehicleParam::set_wheel_base(double value) {
  
  wheel_base_ = value;
  // @@protoc_insertion_point(field_set:common.VehicleParam.wheel_base)
}

// double wheel_rolling_radius = 17;
inline void VehicleParam::clear_wheel_rolling_radius() {
  wheel_rolling_radius_ = 0;
}
inline double VehicleParam::wheel_rolling_radius() const {
  // @@protoc_insertion_point(field_get:common.VehicleParam.wheel_rolling_radius)
  return wheel_rolling_radius_;
}
inline void VehicleParam::set_wheel_rolling_radius(double value) {
  
  wheel_rolling_radius_ = value;
  // @@protoc_insertion_point(field_set:common.VehicleParam.wheel_rolling_radius)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace common

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::common::VehicleBrand> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::VehicleBrand>() {
  return ::common::VehicleBrand_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_common_2fproto_2fvehicle_5fparam_2eproto
